{
  "address": "0x3861Bb32C200CF1D7CC3ab799af55CE56b939dfC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressesProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "addAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "addAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressesProvider",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "latestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "latestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "removeAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setAssetPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "name": "setAssetPrices",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06901af9c75877e80920131216478fca5f777bd9dde1d0af5e58e24f6db9f85a",
  "receipt": {
    "to": null,
    "from": "0xC6BdFA7e694db5621CdcB7242d1931FC586f6d1d",
    "contractAddress": "0x3861Bb32C200CF1D7CC3ab799af55CE56b939dfC",
    "transactionIndex": 1,
    "gasUsed": "1208665",
    "logsBloom": "0x
    "blockHash": "0x545225de536244b98049c21d6071085c9f96da6729117d43443fa61392aa32f7",
    "transactionHash": "0x06901af9c75877e80920131216478fca5f777bd9dde1d0af5e58e24f6db9f85a",
    "logs": [],
    "blockNumber": 3229424,
    "cumulativeGasUsed": "1208665",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe4389d82FC544E13C9925Ab1A106951eF6238168"
  ],
  "numDeployments": 1,
  "solcInputHash": "8360ed8ab91bd6123437d68828943be0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"addAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"latestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"removeAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setAssetPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"name\":\"setAssetPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/AssetPriceOracle.sol\":\"AssetPriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/v3/AssetPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RewardsDistributor.sol\\\";\\nimport \\\"./interfaces/IAddressesProvider.sol\\\";\\n\\ncontract AssetPriceOracle {\\n  struct Price {\\n    uint256 price;\\n    uint256 timestamp;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == addressesProvider.getAssetPriceOracleAdmin(), \\\"AssetPriceOracle: caller is not the AssetPriceOracleAdmin\\\");\\n    _;\\n  }\\n\\n  IAddressesProvider public addressesProvider;\\n\\n  constructor(address _addressesProvider) {\\n    addressesProvider = IAddressesProvider(_addressesProvider);\\n  }\\n\\n  mapping(address => Price) public assetPrice;\\n\\n  function latestPrice(address asset) external view returns (uint256) {\\n    return assetPrice[asset].price;\\n  }\\n\\n  function latestTimestamp(address asset) external view returns (uint256) {\\n    return assetPrice[asset].timestamp;\\n  }\\n\\n  function setAssetPrice(address asset, uint256 price) public onlyOwner {\\n    require(price > 0, \\\"AssetPriceOracle: price must be greater than 0\\\");\\n    assetPrice[asset].price = price;\\n    assetPrice[asset].timestamp = block.timestamp;\\n  }\\n\\n  function setAssetPrices(address[] memory assets, uint256[] memory prices) external onlyOwner {\\n    require(assets.length == prices.length, \\\"assets and prices must have the same length\\\");\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      setAssetPrice(assets[i], prices[i]);\\n    }\\n  }\\n\\n  function addAsset(address asset, uint256 price) public onlyOwner {\\n    require(assetPrice[asset].timestamp == 0, \\\"AssetPriceOracle: asset already exists\\\");\\n    assetPrice[asset].price = price;\\n    assetPrice[asset].timestamp = block.timestamp;\\n  }\\n\\n  function addAssets(address[] memory assets, uint256[] memory prices) external onlyOwner {\\n    require(assets.length == prices.length, \\\"assets and prices must have the same length\\\");\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      addAsset(assets[i], prices[i]);\\n    }\\n  }\\n\\n  function removeAsset(address asset) external onlyOwner {\\n    require(assetPrice[asset].timestamp != 0, \\\"AssetPriceOracle: asset does not exist\\\");\\n    delete assetPrice[asset];\\n  }\\n}\\n\",\"keccak256\":\"0x5c6fb30470589d19f4fb36e5df912389241ac3602c866b8eecf405d808d0ece7\",\"license\":\"MIT\"},\"contracts/v3/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"./interfaces/IAddressesProvider.sol\\\";\\n\\ncontract RewardsDistributor is IRewardsDistributor {\\n\\n  uint256 private constant COMMISSION_PRECISION = 10000; // 100%\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == addressesProvider.getRewardsDistributorAdmin(), \\\"RewardsDistributor: caller is not the RewardsDistributorAdmin\\\");\\n    _;\\n  }\\n\\n  IAddressesProvider public immutable addressesProvider;\\n  IERC20 public immutable rewardToken;\\n  uint256 public immutable rewardTokenDecimals = 1e6;\\n\\n  address[] public registeredAssets;\\n\\n  // token => Pool Info for that token.\\n  mapping(address => PoolInfo) public poolInfo;\\n\\n  // token => Array of Emission point structs.\\n  mapping(address => EmissionPoint[]) public emissionSchedule;\\n\\n  // token => user => Info of each user that stakes LP tokens.\\n  mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n  // user => receiver\\n  mapping(address => address) public claimReceiver;\\n\\n  constructor(IERC20 _rewardToken, IAddressesProvider _addressesProvider) {\\n    require(address(_addressesProvider) != address(0), \\\"RewardsDistributor: addresses provider is the zero address\\\");\\n    require(address(_rewardToken) != address(0), \\\"RewardsDistributor: reward token is the zero address\\\");\\n    addressesProvider = _addressesProvider;\\n    rewardToken = _rewardToken;\\n  }\\n\\n  function poolLength() external view override returns (uint256) {\\n    return registeredAssets.length;\\n  }\\n\\n  function calculateActualEmissionPointPerPool(address _token) public view override returns (uint256) {\\n    uint256 currentEmissionPoint = poolInfo[_token].currentEmissionPoint;\\n    EmissionPoint[] storage schedule = emissionSchedule[_token];\\n    if (schedule.length == 0) {\\n      return 0;\\n    }\\n    for (uint256 i = currentEmissionPoint; i < schedule.length; i++) {\\n      if (schedule[i].startTime <= block.timestamp && block.timestamp < schedule[i].endTime) {\\n        return i;\\n      }\\n    }\\n    return schedule.length - 1;\\n  }\\n\\n  function emissionScheduleLength(address _token) external view override returns (uint256) {\\n    return emissionSchedule[_token].length;\\n  }\\n\\n  function getEmissionPoints(address _token, uint256 startIndex) external view override returns (EmissionPoint[] memory emissionPoints) {\\n    uint256 length = emissionSchedule[_token].length;\\n    emissionPoints = new EmissionPoint[](length - startIndex);\\n    for (uint256 i = 0; i < length - startIndex; i++) {\\n      emissionPoints[i] = emissionSchedule[_token][i + startIndex];\\n    }\\n  }\\n\\n  function claimableRewards(address _user, address[] calldata _tokens) external view override returns (uint256[] memory) {\\n    uint256[] memory claimable = new uint256[](_tokens.length);\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      address token = _tokens[i];\\n      PoolInfo memory pool = poolInfo[token];\\n      uint256 firstEmissionPoint = pool.currentEmissionPoint;\\n      uint256 lastEmissionPoint = calculateActualEmissionPointPerPool(token);\\n      if (firstEmissionPoint == lastEmissionPoint) {\\n        EmissionPoint memory emissionPoint = emissionSchedule[token][pool.currentEmissionPoint];\\n        uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n        uint256 duration = block.timestamp - startTime;\\n        uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n        pool.lastRewardTime = block.timestamp;\\n      } else {\\n        for (uint256 j = firstEmissionPoint; j <= lastEmissionPoint; j++) {\\n          EmissionPoint memory emissionPoint = emissionSchedule[token][j];\\n          uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n          uint256 endTime = emissionPoint.endTime > block.timestamp ? block.timestamp : emissionPoint.endTime;\\n          uint256 duration = endTime - startTime;\\n          uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n          pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n          pool.lastRewardTime = endTime;\\n        }\\n      }\\n      UserInfo memory user = userInfo[token][_user];\\n      claimable[i] = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12 - user.rewardDebt;\\n    }\\n    return claimable;\\n  }\\n\\n  function addPool(address _token, uint256 decimals, uint256 _totalSupply) external override onlyOwner {\\n    require(poolInfo[_token].lastRewardTime == 0);\\n    registeredAssets.push(_token);\\n    poolInfo[_token] = PoolInfo({\\n    totalSupply : _totalSupply,\\n    lastRewardTime : block.timestamp,\\n    accRewardPerShare : 0,\\n    currentEmissionPoint : 0,\\n    isInitialized : false,\\n    decimals : 10 ** decimals,\\n    commission : Commission({\\n    companyAddress : address(0),\\n    assetReserveAddress : address(0),\\n    companyCommission : 0,\\n    assetReserveCommission : 0\\n    })\\n    });\\n    emit PoolAdded(_token, _totalSupply);\\n  }\\n\\n  function addEmissionPointsForPool(address _token, uint256[] memory _startTimes, uint256[] memory _endTimes, uint256[] memory _rewardsPerSecond) external override onlyOwner {\\n    require(_startTimes.length == _endTimes.length);\\n    require(_startTimes.length == _rewardsPerSecond.length);\\n    for (uint256 i = 0; i < _startTimes.length; i++) {\\n      emissionSchedule[_token].push(EmissionPoint({\\n      startTime : uint128(_startTimes[i]),\\n      endTime : uint128(_endTimes[i]),\\n      rewardsPerSecond : _rewardsPerSecond[i]\\n      }));\\n    }\\n    _updatePool(_token);\\n  }\\n\\n  function initializePool(address _token, address companyAddress, address assetReserveAddress, uint256 companyCommission, uint256 assetReserveCommission) external override onlyOwner {\\n    require(!poolInfo[_token].isInitialized, \\\"Pool already initialized\\\");\\n    require(emissionSchedule[_token].length > 0, \\\"Emission schedule not set\\\");\\n    require(companyAddress != address(0), \\\"Company address not set\\\");\\n    require(assetReserveAddress != address(0), \\\"Asset reserve address not set\\\");\\n    poolInfo[_token].isInitialized = true;\\n    poolInfo[_token].commission = Commission({\\n    companyAddress : companyAddress,\\n    assetReserveAddress : assetReserveAddress,\\n    companyCommission : companyCommission,\\n    assetReserveCommission : assetReserveCommission\\n    });\\n\\n    emit PoolInitialized(_token);\\n  }\\n\\n  function _updatePool(address _token) internal {\\n    PoolInfo storage pool = poolInfo[_token];\\n    if (block.timestamp <= pool.lastRewardTime || !pool.isInitialized || emissionSchedule[_token].length == 0) {\\n      return;\\n    }\\n    uint256 firstEmissionPoint = pool.currentEmissionPoint;\\n    uint256 lastEmissionPoint = calculateActualEmissionPointPerPool(_token);\\n    if (firstEmissionPoint == lastEmissionPoint) {\\n      EmissionPoint memory emissionPoint = emissionSchedule[_token][pool.currentEmissionPoint];\\n      uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n      uint256 duration = block.timestamp - startTime;\\n      uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n      pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n      pool.lastRewardTime = block.timestamp;\\n    }\\n    else {\\n      for (uint256 i = firstEmissionPoint; i <= lastEmissionPoint; i++) {\\n        EmissionPoint memory emissionPoint = emissionSchedule[_token][i];\\n        uint256 endTime = emissionPoint.endTime > block.timestamp ? block.timestamp : emissionPoint.endTime;\\n        uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n        uint256 duration = endTime - startTime;\\n        uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n        pool.lastRewardTime = emissionPoint.endTime;\\n      }\\n      pool.currentEmissionPoint = lastEmissionPoint;\\n    }\\n  }\\n\\n  function onUserBalanceChanged(address _user, uint256 _balance) external override {\\n    PoolInfo storage pool = poolInfo[msg.sender];\\n    require(pool.lastRewardTime > 0);\\n    _updatePool(msg.sender);\\n    UserInfo storage user = userInfo[msg.sender][_user];\\n    if (user.amount > 0) {\\n      uint256 pending = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12 - user.rewardDebt;\\n      if (pending > 0) {\\n        user.baseClaimable += pending;\\n      }\\n    }\\n    user.amount = _balance;\\n    user.rewardDebt = _balance * pool.accRewardPerShare / 1e12;\\n\\n    emit UserBalanceUpdated(msg.sender, _user, _balance);\\n  }\\n\\n  function setClaimReceiver(address _user, address _receiver) external override {\\n    require(msg.sender == _user, \\\"Only user can set claim receiver\\\");\\n    claimReceiver[_user] = _receiver;\\n  }\\n\\n  function claim(address _user, address[] calldata _tokens) external override {\\n    uint256 pending;\\n    for (uint i = 0; i < _tokens.length; i++) {\\n      PoolInfo storage pool = poolInfo[_tokens[i]];\\n      require(pool.lastRewardTime > 0);\\n      _updatePool(_tokens[i]);\\n\\n      UserInfo storage user = userInfo[_tokens[i]][_user];\\n      uint256 currentRewardDebt = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12;\\n      pending = pending + (currentRewardDebt - user.rewardDebt) + user.baseClaimable;\\n      user.baseClaimable = 0;\\n      user.rewardDebt = currentRewardDebt;\\n    }\\n    safeRewardTokenTransfer(_user, pending);\\n    emit Claimed(_user, pending);\\n  }\\n\\n  function safeRewardTokenTransfer(address _to, uint256 _amount) private {\\n    uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n    if (_amount > rewardTokenBalance) {\\n      rewardToken.transfer(_to, rewardTokenBalance);\\n    } else {\\n      rewardToken.transfer(_to, _amount);\\n    }\\n  }\\n\\n  function payForRent(address token, uint256 amount, uint128 startTime, uint128 endTime) external override {\\n    require(poolInfo[token].isInitialized, \\\"Pool not initialized\\\");\\n    require(amount > 0, \\\"Asset: amount must be greater than 0\\\");\\n    require(startTime < endTime, \\\"Asset: startTime must be less than endTime\\\");\\n    uint256 companyPart = amount * poolInfo[token].commission.companyCommission / COMMISSION_PRECISION;\\n    uint256 assetReservePart = amount * poolInfo[token].commission.assetReserveCommission / COMMISSION_PRECISION;\\n    uint256 userPart = amount - companyPart - assetReservePart;\\n    rewardToken.transferFrom(msg.sender, poolInfo[token].commission.companyAddress, companyPart);\\n    rewardToken.transferFrom(msg.sender, poolInfo[token].commission.assetReserveAddress, assetReservePart);\\n    rewardToken.transferFrom(msg.sender, address(this), userPart);\\n    emit PaidRent(msg.sender, token, amount, startTime, endTime);\\n    emit CompanyPaid(token, companyPart);\\n    emit AssetReservePaid(token, assetReservePart);\\n  }\\n}\\n\",\"keccak256\":\"0xd986587cccae95bac5bff3cb592bed1c15d2bcfd1361e648c812c02dfbcb2e33\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n  event AddressSet(bytes32 id, address indexed newAddress);\\n  event RewardDistributorUpdated(address indexed newAddress);\\n  event AssetPriceOracleUpdated(address indexed newAddress);\\n  event MasterSeriesUpdated(address indexed newAddress);\\n  event RewardDistributorAdminUpdated(address indexed newAddress);\\n  event AssetPriceOracleAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event PropertyFactoryUpdated(address indexed newAddress);\\n  event PropertyFactoryAdminUpdated(address indexed newAddress);\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n  function getAddress(bytes32 id) external view returns (address);\\n  function getRewardsDistributor() external view returns (address);\\n  function setRewardsDistributor(address _rewardDistributor) external;\\n  function getAssetPriceOracle() external view returns (address);\\n  function setAssetPriceOracle(address _assetPriceOracle) external;\\n  function getMasterSeries() external view returns (address);\\n  function setMasterSeries(address _masterSeries) external;\\n  function getRewardsDistributorAdmin() external view returns (address);\\n  function setRewardsDistributorAdmin(address _rewardDistributorAdmin) external;\\n  function getAssetPriceOracleAdmin() external view returns (address);\\n  function setAssetPriceOracleAdmin(address _assetPriceOracleAdmin) external;\\n  function getEmergencyAdmin() external view returns (address);\\n  function setEmergencyAdmin(address _emergencyAdmin) external;\\n  function getPropertyFactory() external view returns (address);\\n  function setPropertyFactory(address _propertyFactory) external;\\n  function getPropertyFactoryAdmin() external view returns (address);\\n  function setPropertyFactoryAdmin(address _propertyFactoryAdmin) external;\\n}\\n\",\"keccak256\":\"0xcaf0c2635bda0ddd52342504531d9ced211732b3248080d38f3e59cecd67a93c\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsDistributor {\\n  event UserBalanceUpdated(address indexed asset, address indexed user, uint256 balance);\\n  event Claimed(address indexed user, uint256 amount);\\n  event PoolAdded(address indexed asset, uint256 totalSupply);\\n  event PoolInitialized(address indexed asset);\\n  event PaidRent(address indexed user, address indexed asset, uint256 amount, uint128 startTime, uint128 endTime);\\n  event CompanyPaid(address indexed asset, uint256 amount);\\n  event AssetReservePaid(address indexed asset, uint256 amount);\\n\\n  struct Commission {\\n    address companyAddress;\\n    address assetReserveAddress;\\n    uint256 companyCommission; // 1000 = 10% | 100 = 1% | 10 = 0.1%\\n    uint256 assetReserveCommission; // 1000 = 10% | 100 = 1% | 10 = 0.1%\\n  }\\n\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n    uint256 baseClaimable;\\n    uint256 lastEmissionPoint;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 totalSupply;\\n    uint256 decimals;\\n    uint256 lastRewardTime; // Last second that reward distribution occurs.\\n    uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12.\\n    uint256 currentEmissionPoint;\\n    bool isInitialized;\\n    Commission commission;\\n  }\\n\\n  struct EmissionPoint {\\n    uint128 startTime;\\n    uint128 endTime;\\n    uint256 rewardsPerSecond;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n  function emissionScheduleLength(address _token) external view returns (uint256);\\n  function getEmissionPoints(address _token, uint256 startIndex) external view returns (EmissionPoint[] memory emissionPoints);\\n  function calculateActualEmissionPointPerPool(address _token) external view returns (uint256);\\n  function claim(address user, address[] calldata _tokens) external;\\n  function onUserBalanceChanged(address _user, uint256 _balance) external;\\n  function setClaimReceiver(address _user, address _receiver) external;\\n  function addPool(address _token, uint256 _decimals, uint256 _totalSupply) external;\\n  function initializePool(address _token, address companyAddress, address assetReserveAddress, uint256 companyCommission, uint256 assetReserveCommission) external;\\n  function addEmissionPointsForPool(address _token, uint256[] memory _startTimes, uint256[] memory _endTimes, uint256[] memory _rewardsPerSecond) external;\\n  function payForRent(address _asset, uint256 _amount, uint128 _startTime, uint128 _endTime) external;\\n  function claimableRewards(address _user, address[] calldata _tokens) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe198f55041e2230d4363c8487eb7769631744e33d530666b8bf2a54568843a92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015ab380380620015ab833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200010f565b6000815190506200008f81620000f5565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010081620000c1565b81146200010c57600080fd5b50565b61148c806200011f6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806359dd1ce61161006657806359dd1ce61461011c57806366a6a4bd1461014c578063b883b05814610168578063c72c4d1014610199578063ecb1c85a146101b757610093565b80633d8ef0de146100985780634a5e42b1146100b457806351323f72146100d057806353084eff146100ec575b600080fd5b6100b260048036038101906100ad9190610e8e565b6101d3565b005b6100ce60048036038101906100c99190610e00565b6103d0565b005b6100ea60048036038101906100e59190610e52565b6105b6565b005b61010660048036038101906101019190610e00565b610796565b6040516101139190611082565b60405180910390f35b61013660048036038101906101319190610e00565b6107e2565b6040516101439190611082565b60405180910390f35b61016660048036038101906101619190610e52565b61082e565b005b610182600480360381019061017d9190610e00565b610a50565b60405161019092919061109d565b60405180910390f35b6101a1610a74565b6040516101ae9190610fc7565b60405180910390f35b6101d160048036038101906101cc9190610e8e565b610a98565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d590610fe2565b60405180910390fd5b8051825114610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031990611022565b60405180910390fd5b60005b82518110156103cb576103b883828151811061036a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518383815181106103ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161082e565b80806103c3906111e5565b915050610325565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e9190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610fe2565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055890611042565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610fe2565b60405180910390fd5b60008111610704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fb90611002565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093090610fe2565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154146109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590611062565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b60016020528060005260406000206000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b369190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90610fe2565b60405180910390fd5b8051825114610be7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bde90611022565b60405180910390fd5b60005b8251811015610c9057610c7d838281518110610c2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838381518110610c70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105b6565b8080610c88906111e5565b915050610bea565b505050565b6000610ca8610ca3846110eb565b6110c6565b90508083825260208201905082856020860282011115610cc757600080fd5b60005b85811015610cf75781610cdd8882610d6d565b845260208401935060208301925050600181019050610cca565b5050509392505050565b6000610d14610d0f84611117565b6110c6565b90508083825260208201905082856020860282011115610d3357600080fd5b60005b85811015610d635781610d498882610deb565b845260208401935060208301925050600181019050610d36565b5050509392505050565b600081359050610d7c81611428565b92915050565b600081519050610d9181611428565b92915050565b600082601f830112610da857600080fd5b8135610db8848260208601610c95565b91505092915050565b600082601f830112610dd257600080fd5b8135610de2848260208601610d01565b91505092915050565b600081359050610dfa8161143f565b92915050565b600060208284031215610e1257600080fd5b6000610e2084828501610d6d565b91505092915050565b600060208284031215610e3b57600080fd5b6000610e4984828501610d82565b91505092915050565b60008060408385031215610e6557600080fd5b6000610e7385828601610d6d565b9250506020610e8485828601610deb565b9150509250929050565b60008060408385031215610ea157600080fd5b600083013567ffffffffffffffff811115610ebb57600080fd5b610ec785828601610d97565b925050602083013567ffffffffffffffff811115610ee457600080fd5b610ef085828601610dc1565b9150509250929050565b610f0381611190565b82525050565b6000610f16603983611143565b9150610f218261129d565b604082019050919050565b6000610f39602e83611143565b9150610f44826112ec565b604082019050919050565b6000610f5c602b83611143565b9150610f678261133b565b604082019050919050565b6000610f7f602683611143565b9150610f8a8261138a565b604082019050919050565b6000610fa2602683611143565b9150610fad826113d9565b604082019050919050565b610fc181611186565b82525050565b6000602082019050610fdc6000830184610efa565b92915050565b60006020820190508181036000830152610ffb81610f09565b9050919050565b6000602082019050818103600083015261101b81610f2c565b9050919050565b6000602082019050818103600083015261103b81610f4f565b9050919050565b6000602082019050818103600083015261105b81610f72565b9050919050565b6000602082019050818103600083015261107b81610f95565b9050919050565b60006020820190506110976000830184610fb8565b92915050565b60006040820190506110b26000830185610fb8565b6110bf6020830184610fb8565b9392505050565b60006110d06110e1565b90506110dc82826111b4565b919050565b6000604051905090565b600067ffffffffffffffff8211156111065761110561125d565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111325761113161125d565b5b602082029050602081019050919050565b600082825260208201905092915050565b600061115f82611166565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061119b826111a2565b9050919050565b60006111ad82611166565b9050919050565b6111bd8261128c565b810181811067ffffffffffffffff821117156111dc576111db61125d565b5b80604052505050565b60006111f082611186565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112235761122261122e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f417373657450726963654f7261636c653a2063616c6c6572206973206e6f742060008201527f74686520417373657450726963654f7261636c6541646d696e00000000000000602082015250565b7f417373657450726963654f7261636c653a207072696365206d7573742062652060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b7f61737365747320616e6420707269636573206d7573742068617665207468652060008201527f73616d65206c656e677468000000000000000000000000000000000000000000602082015250565b7f417373657450726963654f7261636c653a20617373657420646f6573206e6f7460008201527f2065786973740000000000000000000000000000000000000000000000000000602082015250565b7f417373657450726963654f7261636c653a20617373657420616c72656164792060008201527f6578697374730000000000000000000000000000000000000000000000000000602082015250565b61143181611154565b811461143c57600080fd5b50565b61144881611186565b811461145357600080fd5b5056fea264697066735822122044758836dd88272e09e8c10b98a74fe3c7fcc04fd398ed1dce84c4413e2f060e64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806359dd1ce61161006657806359dd1ce61461011c57806366a6a4bd1461014c578063b883b05814610168578063c72c4d1014610199578063ecb1c85a146101b757610093565b80633d8ef0de146100985780634a5e42b1146100b457806351323f72146100d057806353084eff146100ec575b600080fd5b6100b260048036038101906100ad9190610e8e565b6101d3565b005b6100ce60048036038101906100c99190610e00565b6103d0565b005b6100ea60048036038101906100e59190610e52565b6105b6565b005b61010660048036038101906101019190610e00565b610796565b6040516101139190611082565b60405180910390f35b61013660048036038101906101319190610e00565b6107e2565b6040516101439190611082565b60405180910390f35b61016660048036038101906101619190610e52565b61082e565b005b610182600480360381019061017d9190610e00565b610a50565b60405161019092919061109d565b60405180910390f35b6101a1610a74565b6040516101ae9190610fc7565b60405180910390f35b6101d160048036038101906101cc9190610e8e565b610a98565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561023957600080fd5b505afa15801561024d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102719190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d590610fe2565b60405180910390fd5b8051825114610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031990611022565b60405180910390fd5b60005b82518110156103cb576103b883828151811061036a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518383815181106103ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161082e565b80806103c3906111e5565b915050610325565b505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561043657600080fd5b505afa15801561044a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046e9190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d290610fe2565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541415610561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055890611042565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600090556001820160009055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106549190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b890610fe2565b60405180910390fd5b60008111610704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fb90611002565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b15801561089457600080fd5b505afa1580156108a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108cc9190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610939576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093090610fe2565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154146109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590611062565b60405180910390fd5b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555042600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b60016020528060005260406000206000915090508060000154908060010154905082565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166386f1b1b66040518163ffffffff1660e01b815260040160206040518083038186803b158015610afe57600080fd5b505afa158015610b12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b369190610e29565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ba3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9a90610fe2565b60405180910390fd5b8051825114610be7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bde90611022565b60405180910390fd5b60005b8251811015610c9057610c7d838281518110610c2f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838381518110610c70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516105b6565b8080610c88906111e5565b915050610bea565b505050565b6000610ca8610ca3846110eb565b6110c6565b90508083825260208201905082856020860282011115610cc757600080fd5b60005b85811015610cf75781610cdd8882610d6d565b845260208401935060208301925050600181019050610cca565b5050509392505050565b6000610d14610d0f84611117565b6110c6565b90508083825260208201905082856020860282011115610d3357600080fd5b60005b85811015610d635781610d498882610deb565b845260208401935060208301925050600181019050610d36565b5050509392505050565b600081359050610d7c81611428565b92915050565b600081519050610d9181611428565b92915050565b600082601f830112610da857600080fd5b8135610db8848260208601610c95565b91505092915050565b600082601f830112610dd257600080fd5b8135610de2848260208601610d01565b91505092915050565b600081359050610dfa8161143f565b92915050565b600060208284031215610e1257600080fd5b6000610e2084828501610d6d565b91505092915050565b600060208284031215610e3b57600080fd5b6000610e4984828501610d82565b91505092915050565b60008060408385031215610e6557600080fd5b6000610e7385828601610d6d565b9250506020610e8485828601610deb565b9150509250929050565b60008060408385031215610ea157600080fd5b600083013567ffffffffffffffff811115610ebb57600080fd5b610ec785828601610d97565b925050602083013567ffffffffffffffff811115610ee457600080fd5b610ef085828601610dc1565b9150509250929050565b610f0381611190565b82525050565b6000610f16603983611143565b9150610f218261129d565b604082019050919050565b6000610f39602e83611143565b9150610f44826112ec565b604082019050919050565b6000610f5c602b83611143565b9150610f678261133b565b604082019050919050565b6000610f7f602683611143565b9150610f8a8261138a565b604082019050919050565b6000610fa2602683611143565b9150610fad826113d9565b604082019050919050565b610fc181611186565b82525050565b6000602082019050610fdc6000830184610efa565b92915050565b60006020820190508181036000830152610ffb81610f09565b9050919050565b6000602082019050818103600083015261101b81610f2c565b9050919050565b6000602082019050818103600083015261103b81610f4f565b9050919050565b6000602082019050818103600083015261105b81610f72565b9050919050565b6000602082019050818103600083015261107b81610f95565b9050919050565b60006020820190506110976000830184610fb8565b92915050565b60006040820190506110b26000830185610fb8565b6110bf6020830184610fb8565b9392505050565b60006110d06110e1565b90506110dc82826111b4565b919050565b6000604051905090565b600067ffffffffffffffff8211156111065761110561125d565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111325761113161125d565b5b602082029050602081019050919050565b600082825260208201905092915050565b600061115f82611166565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061119b826111a2565b9050919050565b60006111ad82611166565b9050919050565b6111bd8261128c565b810181811067ffffffffffffffff821117156111dc576111db61125d565b5b80604052505050565b60006111f082611186565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156112235761122261122e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f417373657450726963654f7261636c653a2063616c6c6572206973206e6f742060008201527f74686520417373657450726963654f7261636c6541646d696e00000000000000602082015250565b7f417373657450726963654f7261636c653a207072696365206d7573742062652060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b7f61737365747320616e6420707269636573206d7573742068617665207468652060008201527f73616d65206c656e677468000000000000000000000000000000000000000000602082015250565b7f417373657450726963654f7261636c653a20617373657420646f6573206e6f7460008201527f2065786973740000000000000000000000000000000000000000000000000000602082015250565b7f417373657450726963654f7261636c653a20617373657420616c72656164792060008201527f6578697374730000000000000000000000000000000000000000000000000000602082015250565b61143181611154565b811461143c57600080fd5b50565b61144881611186565b811461145357600080fd5b5056fea264697066735822122044758836dd88272e09e8c10b98a74fe3c7fcc04fd398ed1dce84c4413e2f060e64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8042,
        "contract": "contracts/v3/AssetPriceOracle.sol:AssetPriceOracle",
        "label": "addressesProvider",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressesProvider)11150"
      },
      {
        "astId": 8059,
        "contract": "contracts/v3/AssetPriceOracle.sol:AssetPriceOracle",
        "label": "assetPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Price)8025_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressesProvider)11150": {
        "encoding": "inplace",
        "label": "contract IAddressesProvider",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Price)8025_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AssetPriceOracle.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)8025_storage"
      },
      "t_struct(Price)8025_storage": {
        "encoding": "inplace",
        "label": "struct AssetPriceOracle.Price",
        "members": [
          {
            "astId": 8022,
            "contract": "contracts/v3/AssetPriceOracle.sol:AssetPriceOracle",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8024,
            "contract": "contracts/v3/AssetPriceOracle.sol:AssetPriceOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
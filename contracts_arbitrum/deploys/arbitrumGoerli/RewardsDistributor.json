{
  "address": "0xA33cd5a55636CF878E936A6D93178232920fbD02",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AssetReservePaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "BalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CompanyPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "startTime",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "endTime",
          "type": "uint128"
        }
      ],
      "name": "PaidRent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "PoolInitialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_startTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_endTimes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardsPerSecond",
          "type": "uint256[]"
        }
      ],
      "name": "addEmissionPointsForPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "calculateActualEmissionPointPerPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emissionSchedule",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "startTime",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endTime",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "rewardsPerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "emissionScheduleLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startIndex",
          "type": "uint256"
        }
      ],
      "name": "getEmissionPoints",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "startTime",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "endTime",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPerSecond",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsDistributor.EmissionPoint[]",
          "name": "emissionPoints",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "handleAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "companyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetReserveAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "companyCommission",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetReserveCommission",
          "type": "uint256"
        }
      ],
      "name": "initializePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "startTime",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "endTime",
          "type": "uint128"
        }
      ],
      "name": "payForRent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentEmissionPoint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isInitialized",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "companyAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "assetReserveAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "companyCommission",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetReserveCommission",
              "type": "uint256"
            }
          ],
          "internalType": "struct RewardsDistributor.Commission",
          "name": "commission",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredAssets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        }
      ],
      "name": "setClaimReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseClaimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastEmissionPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf687467c588ed9b867e4e1a38575891249664e587b5f799bea6d14d24a3ea72f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xD5742FAfb58CAbb89A355Ce67c2b0c9Dede6DDFB",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "8968969",
    "logsBloom": "0x
    "blockHash": "0x9e289e4a16ddf162e8c06b0396ab160d294cd7a3664f5bbc2f72de91651d4989",
    "transactionHash": "0xf687467c588ed9b867e4e1a38575891249664e587b5f799bea6d14d24a3ea72f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 2643812,
        "transactionHash": "0xf687467c588ed9b867e4e1a38575891249664e587b5f799bea6d14d24a3ea72f",
        "address": "0xA33cd5a55636CF878E936A6D93178232920fbD02",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e59b44847b379578588920ca78fbf26c0b4956c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9e289e4a16ddf162e8c06b0396ab160d294cd7a3664f5bbc2f72de91651d4989"
      }
    ],
    "blockNumber": 2643812,
    "cumulativeGasUsed": "8968969",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9"
  ],
  "numDeployments": 1,
  "solcInputHash": "8dbabca566951ac19e4e0e32d9658fd0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AssetReservePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CompanyPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"}],\"name\":\"PaidRent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"PoolInitialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_endTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"addEmissionPointsForPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"calculateActualEmissionPointPerPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissionSchedule\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emissionScheduleLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startIndex\",\"type\":\"uint256\"}],\"name\":\"getEmissionPoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsDistributor.EmissionPoint[]\",\"name\":\"emissionPoints\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"handleAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetReserveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"companyCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetReserveCommission\",\"type\":\"uint256\"}],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"startTime\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endTime\",\"type\":\"uint128\"}],\"name\":\"payForRent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentEmissionPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInitialized\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetReserveAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"companyCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetReserveCommission\",\"type\":\"uint256\"}],\"internalType\":\"struct RewardsDistributor.Commission\",\"name\":\"commission\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredAssets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setClaimReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseClaimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEmissionPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/RewardsDistributor.sol\":\"RewardsDistributor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/v3/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RewardsDistributor is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  uint256 private constant COMMISSION_PRECISION = 10000; // 100%\\n\\n  struct Commission {\\n    address companyAddress;\\n    address assetReserveAddress;\\n    uint256 companyCommission; // 1000 = 10% | 100 = 1% | 10 = 0.1%\\n    uint256 assetReserveCommission; // 1000 = 10% | 100 = 1% | 10 = 0.1%\\n  }\\n\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n    uint256 baseClaimable;\\n    uint256 lastEmissionPoint;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 totalSupply;\\n    uint256 decimals;\\n    uint256 lastRewardTime; // Last second that reward distribution occurs.\\n    uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12.\\n    uint256 currentEmissionPoint;\\n    bool isInitialized;\\n    Commission commission;\\n  }\\n\\n  struct EmissionPoint {\\n    uint128 startTime;\\n    uint128 endTime;\\n    uint256 rewardsPerSecond;\\n  }\\n\\n  IERC20 public immutable rewardToken;\\n  uint256 public immutable rewardTokenDecimals = 1e6;\\n\\n  address[] public registeredAssets;\\n\\n  // token => Pool Info for that token.\\n  mapping(address => PoolInfo) public poolInfo;\\n\\n  // token => Array of Emission point structs.\\n  mapping(address => EmissionPoint[]) public emissionSchedule;\\n\\n  // token => user => Info of each user that stakes LP tokens.\\n  mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n  // user => receiver\\n  mapping(address => address) public claimReceiver;\\n\\n  event BalanceUpdated(address indexed asset, address indexed user, uint256 balance);\\n  event Claimed(address indexed user, uint256 amount);\\n  event PoolAdded(address indexed asset, uint256 totalSupply);\\n  event PoolInitialized(address indexed asset);\\n  event PaidRent(address indexed user, address indexed asset, uint256 amount, uint128 startTime, uint128 endTime);\\n  event CompanyPaid(address indexed asset, uint256 amount);\\n  event AssetReservePaid(address indexed asset, uint256 amount);\\n\\n\\n  constructor(IERC20 _rewardToken) Ownable() public {\\n    rewardToken = _rewardToken;\\n  }\\n\\n  function poolLength() external view returns (uint256) {\\n    return registeredAssets.length;\\n  }\\n\\n  function calculateActualEmissionPointPerPool(address _token) public view returns (uint256) {\\n    uint256 currentEmissionPoint = poolInfo[_token].currentEmissionPoint;\\n    EmissionPoint[] storage schedule = emissionSchedule[_token];\\n    if (schedule.length == 0) {\\n      return 0;\\n    }\\n    for (uint256 i = currentEmissionPoint; i < schedule.length; i++) {\\n      if (schedule[i].startTime <= block.timestamp && block.timestamp < schedule[i].endTime) {\\n        return i;\\n      }\\n    }\\n    return schedule.length - 1;\\n  }\\n\\n  function emissionScheduleLength(address _token) external view returns (uint256) {\\n    return emissionSchedule[_token].length;\\n  }\\n\\n  function getEmissionPoints(address _token, uint256 startIndex) external view returns (EmissionPoint[] memory emissionPoints) {\\n    uint256 length = emissionSchedule[_token].length;\\n    emissionPoints = new EmissionPoint[](length - startIndex);\\n    for (uint256 i = 0; i < length - startIndex; i++) {\\n      emissionPoints[i] = emissionSchedule[_token][i + startIndex];\\n    }\\n  }\\n\\n  function claimableRewards(address _user, address[] calldata _tokens) external view returns (uint256[] memory) {\\n    uint256[] memory claimable = new uint256[](_tokens.length);\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      address token = _tokens[i];\\n      PoolInfo memory pool = poolInfo[token];\\n      uint256 firstEmissionPoint = pool.currentEmissionPoint;\\n      uint256 lastEmissionPoint = calculateActualEmissionPointPerPool(token);\\n      if (firstEmissionPoint == lastEmissionPoint) {\\n        EmissionPoint memory emissionPoint = emissionSchedule[token][pool.currentEmissionPoint];\\n        uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n        uint256 duration = block.timestamp - startTime;\\n        uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / pool.totalSupply);\\n        pool.lastRewardTime = block.timestamp;\\n      } else {\\n        for (uint256 j = firstEmissionPoint; j <= lastEmissionPoint; j++) {\\n          EmissionPoint memory emissionPoint = emissionSchedule[token][j];\\n          uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n          uint256 endTime = emissionPoint.endTime > block.timestamp ? block.timestamp : emissionPoint.endTime;\\n          uint256 duration = endTime - startTime;\\n          uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n          pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / pool.totalSupply);\\n          pool.lastRewardTime = endTime;\\n        }\\n      }\\n      UserInfo memory user = userInfo[token][_user];\\n      claimable[i] = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12 - user.rewardDebt;\\n    }\\n    return claimable;\\n  }\\n\\n  function addPool(address _token, uint256 decimals, uint256 _totalSupply) external onlyOwner {\\n    require(poolInfo[_token].lastRewardTime == 0);\\n    registeredAssets.push(_token);\\n    poolInfo[_token] = PoolInfo({\\n    totalSupply : _totalSupply,\\n    lastRewardTime : block.timestamp,\\n    accRewardPerShare : 0,\\n    currentEmissionPoint : 0,\\n    isInitialized : false,\\n    decimals : 10 ** decimals,\\n    commission : Commission({\\n    companyAddress : address(0),\\n    assetReserveAddress : address(0),\\n    companyCommission : 0,\\n    assetReserveCommission : 0\\n    })\\n    });\\n    emit PoolAdded(_token, _totalSupply);\\n  }\\n\\n  function addEmissionPointsForPool(address _token, uint256[] memory _startTimes, uint256[] memory _endTimes, uint256[] memory _rewardsPerSecond) external onlyOwner {\\n    require(_startTimes.length == _endTimes.length);\\n    require(_startTimes.length == _rewardsPerSecond.length);\\n    for (uint256 i = 0; i < _startTimes.length; i++) {\\n      emissionSchedule[_token].push(EmissionPoint({\\n      startTime : uint128(_startTimes[i]),\\n      endTime : uint128(_endTimes[i]),\\n      rewardsPerSecond : _rewardsPerSecond[i]\\n      }));\\n    }\\n    _updatePool(_token);\\n  }\\n\\n  function initializePool(address _token, address companyAddress, address assetReserveAddress, uint256 companyCommission, uint256 assetReserveCommission) external onlyOwner {\\n    require(!poolInfo[_token].isInitialized, \\\"Pool already initialized\\\");\\n    require(emissionSchedule[_token].length > 0, \\\"Emission schedule not set\\\");\\n    require(companyAddress != address(0), \\\"Company address not set\\\");\\n    require(assetReserveAddress != address(0), \\\"Asset reserve address not set\\\");\\n    poolInfo[_token].isInitialized = true;\\n    poolInfo[_token].commission = Commission({\\n    companyAddress : companyAddress,\\n    assetReserveAddress : assetReserveAddress,\\n    companyCommission : companyCommission,\\n    assetReserveCommission : assetReserveCommission\\n    });\\n\\n    emit PoolInitialized(_token);\\n  }\\n\\n  function _updatePool(address _token) internal {\\n    PoolInfo storage pool = poolInfo[_token];\\n    if (block.timestamp <= pool.lastRewardTime || !pool.isInitialized || emissionSchedule[_token].length == 0) {\\n      return;\\n    }\\n    uint256 firstEmissionPoint = pool.currentEmissionPoint;\\n    uint256 lastEmissionPoint = calculateActualEmissionPointPerPool(_token);\\n    if (firstEmissionPoint == lastEmissionPoint) {\\n      EmissionPoint memory emissionPoint = emissionSchedule[_token][pool.currentEmissionPoint];\\n      uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n      uint256 duration = block.timestamp - startTime;\\n      uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n      pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / pool.totalSupply);\\n      pool.lastRewardTime = block.timestamp;\\n    }\\n    else {\\n      for (uint256 i = firstEmissionPoint; i <= lastEmissionPoint; i++) {\\n        EmissionPoint memory emissionPoint = emissionSchedule[_token][i];\\n        uint256 endTime = emissionPoint.endTime > block.timestamp ? block.timestamp : emissionPoint.endTime;\\n        uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n        uint256 duration = endTime - startTime;\\n        uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / pool.totalSupply);\\n        pool.lastRewardTime = emissionPoint.endTime;\\n      }\\n      pool.currentEmissionPoint = lastEmissionPoint;\\n    }\\n  }\\n\\n  function handleAction(address _user, uint256 _balance) external {\\n    PoolInfo storage pool = poolInfo[msg.sender];\\n    require(pool.lastRewardTime > 0);\\n    _updatePool(msg.sender);\\n    UserInfo storage user = userInfo[msg.sender][_user];\\n    if (user.amount > 0) {\\n      uint256 pending = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12 - user.rewardDebt;\\n      if (pending > 0) {\\n        user.baseClaimable += pending;\\n      }\\n    }\\n    user.amount = _balance;\\n    user.rewardDebt = _balance * pool.accRewardPerShare / 1e12;\\n\\n    emit BalanceUpdated(msg.sender, _user, _balance);\\n  }\\n\\n  function setClaimReceiver(address _user, address _receiver) external {\\n    require(msg.sender == _user || msg.sender == owner());\\n    claimReceiver[_user] = _receiver;\\n  }\\n\\n  function claim(address _user, address[] calldata _tokens) external {\\n    uint256 pending;\\n    for (uint i = 0; i < _tokens.length; i++) {\\n      PoolInfo storage pool = poolInfo[_tokens[i]];\\n      require(pool.lastRewardTime > 0);\\n      _updatePool(_tokens[i]);\\n\\n      UserInfo storage user = userInfo[_tokens[i]][_user];\\n      uint256 currentRewardDebt = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12;\\n      pending = pending + (currentRewardDebt - user.rewardDebt) + user.baseClaimable;\\n      user.baseClaimable = 0;\\n      user.rewardDebt = currentRewardDebt;\\n    }\\n    safeRewardTokenTransfer(_user, pending);\\n    emit Claimed(_user, pending);\\n  }\\n\\n  function safeRewardTokenTransfer(address _to, uint256 _amount) internal {\\n    uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n    if (_amount > rewardTokenBalance) {\\n      rewardToken.transfer(_to, rewardTokenBalance);\\n    } else {\\n      rewardToken.transfer(_to, _amount);\\n    }\\n  }\\n\\n  function payForRent(address token, uint256 amount, uint128 startTime, uint128 endTime) external {\\n    require(poolInfo[token].isInitialized, \\\"Pool not initialized\\\");\\n    require(amount > 0, \\\"Asset: amount must be greater than 0\\\");\\n    require(startTime < endTime, \\\"Asset: startTime must be less than endTime\\\");\\n    uint256 companyPart = amount * poolInfo[token].commission.companyCommission / COMMISSION_PRECISION;\\n    uint256 assetReservePart = amount * poolInfo[token].commission.assetReserveCommission / COMMISSION_PRECISION;\\n    uint256 userPart = amount - companyPart - assetReservePart;\\n    rewardToken.transferFrom(msg.sender, poolInfo[token].commission.companyAddress, companyPart);\\n    rewardToken.transferFrom(msg.sender, poolInfo[token].commission.assetReserveAddress, assetReservePart);\\n    rewardToken.transferFrom(msg.sender, address(this), userPart);\\n    emit PaidRent(msg.sender, token, amount, startTime, endTime);\\n    emit CompanyPaid(token, companyPart);\\n    emit AssetReservePaid(token, assetReservePart);\\n  }\\n}\\n\",\"keccak256\":\"0x0cdb5acd0c0a777c9176dcc1d7668d4a8ef453d0d6ee7e149ede22fe301fb3e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c0604052620f424060a0908152503480156200001b57600080fd5b506040516200476638038062004766833981810160405281019062000041919062000182565b62000061620000556200009f60201b60201c565b620000a760201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000210565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c81620001f6565b92915050565b6000602082840312156200019557600080fd5b6000620001a5848285016200016b565b91505092915050565b6000620001bb82620001d6565b9050919050565b6000620001cf82620001ae565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200020181620001c2565b81146200020d57600080fd5b50565b60805160601c60a0516144ee6200027860003960008181610a7301528181611743015281816125f50152612812015260008181611df401528181611f090152818161201e015281816129780152818161300e015281816130c1015261317401526144ee6000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b85780639bdcecd11161007c5780639bdcecd11461037c578063a083bd3c1461039a578063cbbf3385146103ca578063e20c5a8a146103fa578063f2fde38b1461042a578063f7c618c11461044657610142565b8063715018a6146102d25780637b7e1135146102dc5780638da5cb5b1461030c5780638e2eba091461032a5780639a7b5f111461034657610142565b8063165c029c1161010a578063165c029c14610200578063173e51f71461023257806317afe17c1461024e57806317ccd7ee1461027e578063332875641461029a578063420637cf146102b657610142565b806303eb7b8214610147578063081e3eda146101635780630cb3a60a146101815780630f208beb146101b1578063117f5ac4146101e4575b600080fd5b610161600480360381019061015c91906134f0565b610464565b005b61016b6106a8565b6040516101789190613c6b565b60405180910390f35b61019b6004803603810190610196919061359b565b6106b5565b6040516101a89190613ab5565b60405180910390f35b6101cb60048036038101906101c691906133e5565b610933565b6040516101db9493929190613cbd565b60405180910390f35b6101fe60048036038101906101f9919061359b565b610970565b005b61021a6004803603810190610215919061359b565b610b8e565b60405161022993929190613c34565b60405180910390f35b61024c60048036038101906102479190613421565b610c0d565b005b61026860048036038101906102639190613498565b610fe3565b6040516102759190613ad7565b60405180910390f35b6102986004803603810190610293919061363a565b611802565b005b6102b460048036038101906102af91906133e5565b611ae4565b005b6102d060048036038101906102cb91906135d7565b611bdb565b005b6102da6121da565b005b6102f660048036038101906102f191906133bc565b6121ee565b6040516103039190613c6b565b60405180910390f35b6103146123e1565b6040516103219190613a3a565b60405180910390f35b610344600480360381019061033f9190613498565b61240a565b005b610360600480360381019061035b91906133bc565b6126f7565b6040516103739796959493929190613d02565b60405180910390f35b610384612810565b6040516103919190613c6b565b60405180910390f35b6103b460048036038101906103af91906136b2565b612834565b6040516103c19190613a3a565b60405180910390f35b6103e460048036038101906103df91906133bc565b612873565b6040516103f19190613c6b565b60405180910390f35b610414600480360381019061040f91906133bc565b6128bf565b6040516104219190613a3a565b60405180910390f35b610444600480360381019061043f91906133bc565b6128f2565b005b61044e612976565b60405161045b9190613af9565b60405180910390f35b61046c61299a565b815183511461047a57600080fd5b805183511461048857600080fd5b60005b835181101561069857600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405280868481518110610517577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516fffffffffffffffffffffffffffffffff16815260200185848151811061056f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516fffffffffffffffffffffffffffffffff1681526020018484815181106105c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550604082015181600101555050808061069090614185565b91505061048b565b506106a284612a18565b50505050565b6000600180549050905090565b60606000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050828161070a9190614098565b67ffffffffffffffff811115610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561078257816020015b61076f61322e565b8152602001906001900390816107675790505b50915060005b83826107949190614098565b81101561092b57600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084826107e69190613e46565b8154811061081d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505083828151811061090d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061092390614185565b915050610788565b505092915050565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154905084565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020154116109c457600080fd5b6109cd33612a18565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115610af2576000816001015464e8d4a51000846003015485600101547f00000000000000000000000000000000000000000000000000000000000000008660000154610aa1919061403e565b610aab9190613e9c565b610ab5919061403e565b610abf9190613e9c565b610ac99190614098565b90506000811115610af05780826002016000828254610ae89190613e46565b925050819055505b505b82816000018190555064e8d4a51000826003015484610b11919061403e565b610b1b9190613e9c565b81600101819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a285604051610b809190613c6b565b60405180910390a350505050565b60036020528160005260406000208181548110610baa57600080fd5b9060005260206000209060020201600091509150508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010154905083565b610c1561299a565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1615610ca5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9c90613bf4565b60405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011610d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2190613c14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190613b14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0190613b94565b60405180910390fd5b6001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160006101000a81548160ff02191690831515021790555060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050508473ffffffffffffffffffffffffffffffffffffffff167fcad8c9d32507393b6508ca4a888b81979919b477510585bde8488f153072d6f360405160405180910390a25050505050565b606060008383905067ffffffffffffffff81111561102a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110585781602001602082028036833780820191505090505b50905060005b848490508110156117f65760008585838181106110a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110b991906133bc565b90506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152602001600682016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050815250509050600081608001519050600061123e846121ee565b905080821415611434576000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460800151815481106112c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505090506000846040015182600001516fffffffffffffffffffffffffffffffff16116113ab5784604001516113c3565b81600001516fffffffffffffffffffffffffffffffff165b9050600081426113d39190614098565b905060008360400151826113e7919061403e565b9050866000015164e8d4a51000826113ff919061403e565b6114099190613e9c565b87606001516114189190613e46565b8760600181815250504287604001818152505050505050611679565b60008290505b818111611677576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106114ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505090506000856040015182600001516fffffffffffffffffffffffffffffffff16116115a05785604001516115b8565b81600001516fffffffffffffffffffffffffffffffff165b905060004283602001516fffffffffffffffffffffffffffffffff16116115f55782602001516fffffffffffffffffffffffffffffffff166115f7565b425b9050600082826116079190614098565b9050600084604001518261161b919061403e565b9050886000015164e8d4a5100082611633919061403e565b61163d9190613e9c565b896060015161164c9190613e46565b896060018181525050828960400181815250505050505050808061166f90614185565b91505061143a565b505b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050806020015164e8d4a51000856060015186602001517f00000000000000000000000000000000000000000000000000000000000000008560000151611771919061403e565b61177b9190613e9c565b611785919061403e565b61178f9190613e9c565b6117999190614098565b8787815181106117d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050505050505080806117ee90614185565b91505061105e565b50809150509392505050565b61180a61299a565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541461185957600080fd5b6001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060e0016040528082815260200183600a6118da9190613f20565b815260200142815260200160008152602001600081526020016000151581526020016040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815250815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160060160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550509050508273ffffffffffffffffffffffffffffffffffffffff167f0c98febfffcec480c66a977e13f14bafdb5199ea9603591a0715b0cabe0c3ae282604051611ad79190613c6b565b60405180910390a2505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b505750611b216123e1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611b5957600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16611c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6190613b74565b60405180910390fd5b60008311611cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca490613bb4565b60405180910390fd5b806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a90613b34565b60405180910390fd5b6000612710600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016002015485611d69919061403e565b611d739190613e9c565b90506000612710600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016003015486611dcb919061403e565b611dd59190613e9c565b90506000818387611de69190614098565b611df09190614098565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401611eb493929190613a55565b602060405180830381600087803b158015611ece57600080fd5b505af1158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f069190613689565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611fc993929190613a55565b602060405180830381600087803b158015611fe357600080fd5b505af1158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b9190613689565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161207993929190613a55565b602060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cb9190613689565b508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9cbdb4e6e63af5ac9a1e37be0cb94716affef8d37d2d03a9bf350876e28cc2f488888860405161212d93929190613c86565b60405180910390a38673ffffffffffffffffffffffffffffffffffffffff167f435380b3e997eebf835b5beb720605ea53c6574d1dcae2a7a38ba8fcf2d0fe9b8460405161217b9190613c6b565b60405180910390a28673ffffffffffffffffffffffffffffffffffffffff167f75c78be7de8aa2cee5dd391c96ab7c0900828e7afe7aece650b9089de99d2f26836040516121c99190613c6b565b60405180910390a250505050505050565b6121e261299a565b6121ec6000612f46565b565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081805490501415612291576000925050506123dc565b60008290505b81805490508110156123c557428282815481106122dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16111580156123a2575081818154811061235f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1642105b156123b2578093505050506123dc565b80806123bd90614185565b915050612297565b50600181805490506123d79190614098565b925050505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b838390508110156126985760006002600086868581811061245c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061247191906133bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020154116124be57600080fd5b6125148585848181106124fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061250f91906133bc565b612a18565b600060046000878786818110612553577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061256891906133bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600064e8d4a51000836003015484600101547f00000000000000000000000000000000000000000000000000000000000000008560000154612623919061403e565b61262d9190613e9c565b612637919061403e565b6126419190613e9c565b905081600201548260010154826126589190614098565b866126639190613e46565b61266d9190613e46565b945060008260020181905550808260010181905550505050808061269090614185565b915050612412565b506126a3848261300a565b8373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516126e99190613c6b565b60405180910390a250505050565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff1690806006016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050905087565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061284457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6128fa61299a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561296a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296190613b54565b60405180910390fd5b61297381612f46565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6129a2613226565b73ffffffffffffffffffffffffffffffffffffffff166129c06123e1565b73ffffffffffffffffffffffffffffffffffffffff1614612a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0d90613bd4565b60405180910390fd5b565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015442111580612a7d57508060050160009054906101000a900460ff16155b80612aca57506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050145b15612ad55750612f43565b6000816004015490506000612ae9846121ee565b905080821415612cdd576000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846004015481548110612b70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505090506000846002015482600001516fffffffffffffffffffffffffffffffff1611612c56578460020154612c6e565b81600001516fffffffffffffffffffffffffffffffff165b905060008142612c7e9190614098565b90506000836040015182612c92919061403e565b9050866000015464e8d4a5100082612caa919061403e565b612cb49190613e9c565b8760030154612cc39190613e46565b876003018190555042876002018190555050505050612f3f565b60008290505b818111612f34576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110612d63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001600182015481525050905060004282602001516fffffffffffffffffffffffffffffffff1611612e575781602001516fffffffffffffffffffffffffffffffff16612e59565b425b90506000866002015483600001516fffffffffffffffffffffffffffffffff1611612e88578660020154612ea0565b82600001516fffffffffffffffffffffffffffffffff165b905060008183612eb09190614098565b90506000846040015182612ec4919061403e565b9050886000015464e8d4a5100082612edc919061403e565b612ee69190613e9c565b8960030154612ef59190613e46565b896003018190555084602001516fffffffffffffffffffffffffffffffff16896002018190555050505050508080612f2c90614185565b915050612ce3565b508083600401819055505b5050505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016130659190613a3a565b60206040518083038186803b15801561307d57600080fd5b505afa158015613091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b591906136db565b905080821115613172577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161311a929190613a8c565b602060405180830381600087803b15801561313457600080fd5b505af1158015613148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316c9190613689565b50613221565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016131cd929190613a8c565b602060405180830381600087803b1580156131e757600080fd5b505af11580156131fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321f9190613689565b505b505050565b600033905090565b604051806060016040528060006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600081525090565b600061328661328184613d97565b613d72565b905080838252602082019050828560208602820111156132a557600080fd5b60005b858110156132d557816132bb8882613392565b8452602084019350602083019250506001810190506132a8565b5050509392505050565b6000813590506132ee8161445c565b92915050565b60008083601f84011261330657600080fd5b8235905067ffffffffffffffff81111561331f57600080fd5b60208301915083602082028301111561333757600080fd5b9250929050565b600082601f83011261334f57600080fd5b813561335f848260208601613273565b91505092915050565b60008151905061337781614473565b92915050565b60008135905061338c8161448a565b92915050565b6000813590506133a1816144a1565b92915050565b6000815190506133b6816144a1565b92915050565b6000602082840312156133ce57600080fd5b60006133dc848285016132df565b91505092915050565b600080604083850312156133f857600080fd5b6000613406858286016132df565b9250506020613417858286016132df565b9150509250929050565b600080600080600060a0868803121561343957600080fd5b6000613447888289016132df565b9550506020613458888289016132df565b9450506040613469888289016132df565b935050606061347a88828901613392565b925050608061348b88828901613392565b9150509295509295909350565b6000806000604084860312156134ad57600080fd5b60006134bb868287016132df565b935050602084013567ffffffffffffffff8111156134d857600080fd5b6134e4868287016132f4565b92509250509250925092565b6000806000806080858703121561350657600080fd5b6000613514878288016132df565b945050602085013567ffffffffffffffff81111561353157600080fd5b61353d8782880161333e565b935050604085013567ffffffffffffffff81111561355a57600080fd5b6135668782880161333e565b925050606085013567ffffffffffffffff81111561358357600080fd5b61358f8782880161333e565b91505092959194509250565b600080604083850312156135ae57600080fd5b60006135bc858286016132df565b92505060206135cd85828601613392565b9150509250929050565b600080600080608085870312156135ed57600080fd5b60006135fb878288016132df565b945050602061360c87828801613392565b935050604061361d8782880161337d565b925050606061362e8782880161337d565b91505092959194509250565b60008060006060848603121561364f57600080fd5b600061365d868287016132df565b935050602061366e86828701613392565b925050604061367f86828701613392565b9150509250925092565b60006020828403121561369b57600080fd5b60006136a984828501613368565b91505092915050565b6000602082840312156136c457600080fd5b60006136d284828501613392565b91505092915050565b6000602082840312156136ed57600080fd5b60006136fb848285016133a7565b91505092915050565b600061371083836139bc565b60608301905092915050565b60006137288383613a1c565b60208301905092915050565b61373d816140cc565b82525050565b61374c816140cc565b82525050565b600061375d82613de3565b6137678185613e13565b935061377283613dc3565b8060005b838110156137a357815161378a8882613704565b975061379583613df9565b925050600181019050613776565b5085935050505092915050565b60006137bb82613dee565b6137c58185613e24565b93506137d083613dd3565b8060005b838110156138015781516137e8888261371c565b97506137f383613e06565b9250506001810190506137d4565b5085935050505092915050565b613817816140de565b82525050565b61382681614130565b82525050565b6000613839601783613e35565b915061384482614279565b602082019050919050565b600061385c602a83613e35565b9150613867826142a2565b604082019050919050565b600061387f602683613e35565b915061388a826142f1565b604082019050919050565b60006138a2601483613e35565b91506138ad82614340565b602082019050919050565b60006138c5601d83613e35565b91506138d082614369565b602082019050919050565b60006138e8602483613e35565b91506138f382614392565b604082019050919050565b600061390b602083613e35565b9150613916826143e1565b602082019050919050565b600061392e601883613e35565b91506139398261440a565b602082019050919050565b6000613951601983613e35565b915061395c82614433565b602082019050919050565b60808201600082015161397d6000850182613734565b5060208201516139906020850182613734565b5060408201516139a36040850182613a1c565b5060608201516139b66060850182613a1c565b50505050565b6060820160008201516139d260008501826139fe565b5060208201516139e560208501826139fe565b5060408201516139f86040850182613a1c565b50505050565b613a07816140ea565b82525050565b613a16816140ea565b82525050565b613a2581614126565b82525050565b613a3481614126565b82525050565b6000602082019050613a4f6000830184613743565b92915050565b6000606082019050613a6a6000830186613743565b613a776020830185613743565b613a846040830184613a2b565b949350505050565b6000604082019050613aa16000830185613743565b613aae6020830184613a2b565b9392505050565b60006020820190508181036000830152613acf8184613752565b905092915050565b60006020820190508181036000830152613af181846137b0565b905092915050565b6000602082019050613b0e600083018461381d565b92915050565b60006020820190508181036000830152613b2d8161382c565b9050919050565b60006020820190508181036000830152613b4d8161384f565b9050919050565b60006020820190508181036000830152613b6d81613872565b9050919050565b60006020820190508181036000830152613b8d81613895565b9050919050565b60006020820190508181036000830152613bad816138b8565b9050919050565b60006020820190508181036000830152613bcd816138db565b9050919050565b60006020820190508181036000830152613bed816138fe565b9050919050565b60006020820190508181036000830152613c0d81613921565b9050919050565b60006020820190508181036000830152613c2d81613944565b9050919050565b6000606082019050613c496000830186613a0d565b613c566020830185613a0d565b613c636040830184613a2b565b949350505050565b6000602082019050613c806000830184613a2b565b92915050565b6000606082019050613c9b6000830186613a2b565b613ca86020830185613a0d565b613cb56040830184613a0d565b949350505050565b6000608082019050613cd26000830187613a2b565b613cdf6020830186613a2b565b613cec6040830185613a2b565b613cf96060830184613a2b565b95945050505050565b600061014082019050613d18600083018a613a2b565b613d256020830189613a2b565b613d326040830188613a2b565b613d3f6060830187613a2b565b613d4c6080830186613a2b565b613d5960a083018561380e565b613d6660c0830184613967565b98975050505050505050565b6000613d7c613d8d565b9050613d888282614154565b919050565b6000604051905090565b600067ffffffffffffffff821115613db257613db161422c565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613e5182614126565b9150613e5c83614126565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e9157613e906141ce565b5b828201905092915050565b6000613ea782614126565b9150613eb283614126565b925082613ec257613ec16141fd565b5b828204905092915050565b6000808291508390505b6001851115613f1757808604811115613ef357613ef26141ce565b5b6001851615613f025780820291505b8081029050613f108561426c565b9450613ed7565b94509492505050565b6000613f2b82614126565b9150613f3683614126565b9250613f637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613f6b565b905092915050565b600082613f7b5760019050614037565b81613f895760009050614037565b8160018114613f9f5760028114613fa957613fd8565b6001915050614037565b60ff841115613fbb57613fba6141ce565b5b8360020a915084821115613fd257613fd16141ce565b5b50614037565b5060208310610133831016604e8410600b841016171561400d5782820a905083811115614008576140076141ce565b5b614037565b61401a8484846001613ecd565b92509050818404811115614031576140306141ce565b5b81810290505b9392505050565b600061404982614126565b915061405483614126565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561408d5761408c6141ce565b5b828202905092915050565b60006140a382614126565b91506140ae83614126565b9250828210156140c1576140c06141ce565b5b828203905092915050565b60006140d782614106565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061413b82614142565b9050919050565b600061414d82614106565b9050919050565b61415d8261425b565b810181811067ffffffffffffffff8211171561417c5761417b61422c565b5b80604052505050565b600061419082614126565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141c3576141c26141ce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f436f6d70616e792061646472657373206e6f7420736574000000000000000000600082015250565b7f41737365743a20737461727454696d65206d757374206265206c65737320746860008201527f616e20656e6454696d6500000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f506f6f6c206e6f7420696e697469616c697a6564000000000000000000000000600082015250565b7f417373657420726573657276652061646472657373206e6f7420736574000000600082015250565b7f41737365743a20616d6f756e74206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f506f6f6c20616c726561647920696e697469616c697a65640000000000000000600082015250565b7f456d697373696f6e207363686564756c65206e6f742073657400000000000000600082015250565b614465816140cc565b811461447057600080fd5b50565b61447c816140de565b811461448757600080fd5b50565b614493816140ea565b811461449e57600080fd5b50565b6144aa81614126565b81146144b557600080fd5b5056fea26469706673582212208a0312fb09ae1828d87cdd55f354768221148db0f189c75fcea699527930bfe364736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b85780639bdcecd11161007c5780639bdcecd11461037c578063a083bd3c1461039a578063cbbf3385146103ca578063e20c5a8a146103fa578063f2fde38b1461042a578063f7c618c11461044657610142565b8063715018a6146102d25780637b7e1135146102dc5780638da5cb5b1461030c5780638e2eba091461032a5780639a7b5f111461034657610142565b8063165c029c1161010a578063165c029c14610200578063173e51f71461023257806317afe17c1461024e57806317ccd7ee1461027e578063332875641461029a578063420637cf146102b657610142565b806303eb7b8214610147578063081e3eda146101635780630cb3a60a146101815780630f208beb146101b1578063117f5ac4146101e4575b600080fd5b610161600480360381019061015c91906134f0565b610464565b005b61016b6106a8565b6040516101789190613c6b565b60405180910390f35b61019b6004803603810190610196919061359b565b6106b5565b6040516101a89190613ab5565b60405180910390f35b6101cb60048036038101906101c691906133e5565b610933565b6040516101db9493929190613cbd565b60405180910390f35b6101fe60048036038101906101f9919061359b565b610970565b005b61021a6004803603810190610215919061359b565b610b8e565b60405161022993929190613c34565b60405180910390f35b61024c60048036038101906102479190613421565b610c0d565b005b61026860048036038101906102639190613498565b610fe3565b6040516102759190613ad7565b60405180910390f35b6102986004803603810190610293919061363a565b611802565b005b6102b460048036038101906102af91906133e5565b611ae4565b005b6102d060048036038101906102cb91906135d7565b611bdb565b005b6102da6121da565b005b6102f660048036038101906102f191906133bc565b6121ee565b6040516103039190613c6b565b60405180910390f35b6103146123e1565b6040516103219190613a3a565b60405180910390f35b610344600480360381019061033f9190613498565b61240a565b005b610360600480360381019061035b91906133bc565b6126f7565b6040516103739796959493929190613d02565b60405180910390f35b610384612810565b6040516103919190613c6b565b60405180910390f35b6103b460048036038101906103af91906136b2565b612834565b6040516103c19190613a3a565b60405180910390f35b6103e460048036038101906103df91906133bc565b612873565b6040516103f19190613c6b565b60405180910390f35b610414600480360381019061040f91906133bc565b6128bf565b6040516104219190613a3a565b60405180910390f35b610444600480360381019061043f91906133bc565b6128f2565b005b61044e612976565b60405161045b9190613af9565b60405180910390f35b61046c61299a565b815183511461047a57600080fd5b805183511461048857600080fd5b60005b835181101561069857600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405280868481518110610517577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516fffffffffffffffffffffffffffffffff16815260200185848151811061056f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516fffffffffffffffffffffffffffffffff1681526020018484815181106105c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550604082015181600101555050808061069090614185565b91505061048b565b506106a284612a18565b50505050565b6000600180549050905090565b60606000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050828161070a9190614098565b67ffffffffffffffff811115610749577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561078257816020015b61076f61322e565b8152602001906001900390816107675790505b50915060005b83826107949190614098565b81101561092b57600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084826107e69190613e46565b8154811061081d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505083828151811061090d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250808061092390614185565b915050610788565b505092915050565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154908060020154908060030154905084565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020154116109c457600080fd5b6109cd33612a18565b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081600001541115610af2576000816001015464e8d4a51000846003015485600101547f00000000000000000000000000000000000000000000000000000000000000008660000154610aa1919061403e565b610aab9190613e9c565b610ab5919061403e565b610abf9190613e9c565b610ac99190614098565b90506000811115610af05780826002016000828254610ae89190613e46565b925050819055505b505b82816000018190555064e8d4a51000826003015484610b11919061403e565b610b1b9190613e9c565b81600101819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f2047d1633ff7768462ae07d28cb16e484203bfd6d85ce832494270ebcd9081a285604051610b809190613c6b565b60405180910390a350505050565b60036020528160005260406000208181548110610baa57600080fd5b9060005260206000209060020201600091509150508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16908060010154905083565b610c1561299a565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff1615610ca5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9c90613bf4565b60405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905011610d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2190613c14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190613b14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0190613b94565b60405180910390fd5b6001600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160006101000a81548160ff02191690831515021790555060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815250600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050508473ffffffffffffffffffffffffffffffffffffffff167fcad8c9d32507393b6508ca4a888b81979919b477510585bde8488f153072d6f360405160405180910390a25050505050565b606060008383905067ffffffffffffffff81111561102a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156110585781602001602082028036833780820191505090505b50905060005b848490508110156117f65760008585838181106110a4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110b991906133bc565b90506000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152602001600682016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050815250509050600081608001519050600061123e846121ee565b905080821415611434576000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208460800151815481106112c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505090506000846040015182600001516fffffffffffffffffffffffffffffffff16116113ab5784604001516113c3565b81600001516fffffffffffffffffffffffffffffffff165b9050600081426113d39190614098565b905060008360400151826113e7919061403e565b9050866000015164e8d4a51000826113ff919061403e565b6114099190613e9c565b87606001516114189190613e46565b8760600181815250504287604001818152505050505050611679565b60008290505b818111611677576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106114ba577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505090506000856040015182600001516fffffffffffffffffffffffffffffffff16116115a05785604001516115b8565b81600001516fffffffffffffffffffffffffffffffff165b905060004283602001516fffffffffffffffffffffffffffffffff16116115f55782602001516fffffffffffffffffffffffffffffffff166115f7565b425b9050600082826116079190614098565b9050600084604001518261161b919061403e565b9050886000015164e8d4a5100082611633919061403e565b61163d9190613e9c565b896060015161164c9190613e46565b896060018181525050828960400181815250505050505050808061166f90614185565b91505061143a565b505b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201548152602001600282015481526020016003820154815250509050806020015164e8d4a51000856060015186602001517f00000000000000000000000000000000000000000000000000000000000000008560000151611771919061403e565b61177b9190613e9c565b611785919061403e565b61178f9190613e9c565b6117999190614098565b8787815181106117d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050505050505080806117ee90614185565b91505061105e565b50809150509392505050565b61180a61299a565b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201541461185957600080fd5b6001839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060e0016040528082815260200183600a6118da9190613f20565b815260200142815260200160008152602001600081526020016000151581526020016040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815250815250600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160060160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201556060820151816003015550509050508273ffffffffffffffffffffffffffffffffffffffff167f0c98febfffcec480c66a977e13f14bafdb5199ea9603591a0715b0cabe0c3ae282604051611ad79190613c6b565b60405180910390a2505050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b505750611b216123e1565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611b5957600080fd5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050160009054906101000a900460ff16611c6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c6190613b74565b60405180910390fd5b60008311611cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca490613bb4565b60405180910390fd5b806fffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1610611d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0a90613b34565b60405180910390fd5b6000612710600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016002015485611d69919061403e565b611d739190613e9c565b90506000612710600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016003015486611dcb919061403e565b611dd59190613e9c565b90506000818387611de69190614098565b611df09190614098565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b8152600401611eb493929190613a55565b602060405180830381600087803b158015611ece57600080fd5b505af1158015611ee2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f069190613689565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518463ffffffff1660e01b8152600401611fc993929190613a55565b602060405180830381600087803b158015611fe357600080fd5b505af1158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b9190613689565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161207993929190613a55565b602060405180830381600087803b15801561209357600080fd5b505af11580156120a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cb9190613689565b508673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9cbdb4e6e63af5ac9a1e37be0cb94716affef8d37d2d03a9bf350876e28cc2f488888860405161212d93929190613c86565b60405180910390a38673ffffffffffffffffffffffffffffffffffffffff167f435380b3e997eebf835b5beb720605ea53c6574d1dcae2a7a38ba8fcf2d0fe9b8460405161217b9190613c6b565b60405180910390a28673ffffffffffffffffffffffffffffffffffffffff167f75c78be7de8aa2cee5dd391c96ab7c0900828e7afe7aece650b9089de99d2f26836040516121c99190613c6b565b60405180910390a250505050505050565b6121e261299a565b6121ec6000612f46565b565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004015490506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600081805490501415612291576000925050506123dc565b60008290505b81805490508110156123c557428282815481106122dd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16111580156123a2575081818154811061235f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906002020160000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1642105b156123b2578093505050506123dc565b80806123bd90614185565b915050612297565b50600181805490506123d79190614098565b925050505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600090505b838390508110156126985760006002600086868581811061245c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061247191906133bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160020154116124be57600080fd5b6125148585848181106124fa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061250f91906133bc565b612a18565b600060046000878786818110612553577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061256891906133bc565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600064e8d4a51000836003015484600101547f00000000000000000000000000000000000000000000000000000000000000008560000154612623919061403e565b61262d9190613e9c565b612637919061403e565b6126419190613e9c565b905081600201548260010154826126589190614098565b866126639190613e46565b61266d9190613e46565b945060008260020181905550808260010181905550505050808061269090614185565b915050612412565b506126a3848261300a565b8373ffffffffffffffffffffffffffffffffffffffff167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516126e99190613c6b565b60405180910390a250505050565b60026020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154908060050160009054906101000a900460ff1690806006016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481525050905087565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001818154811061284457600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6128fa61299a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561296a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296190613b54565b60405180910390fd5b61297381612f46565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b6129a2613226565b73ffffffffffffffffffffffffffffffffffffffff166129c06123e1565b73ffffffffffffffffffffffffffffffffffffffff1614612a16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0d90613bd4565b60405180910390fd5b565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050806002015442111580612a7d57508060050160009054906101000a900460ff16155b80612aca57506000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050145b15612ad55750612f43565b6000816004015490506000612ae9846121ee565b905080821415612cdd576000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020846004015481548110612b70577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200160018201548152505090506000846002015482600001516fffffffffffffffffffffffffffffffff1611612c56578460020154612c6e565b81600001516fffffffffffffffffffffffffffffffff165b905060008142612c7e9190614098565b90506000836040015182612c92919061403e565b9050866000015464e8d4a5100082612caa919061403e565b612cb49190613e9c565b8760030154612cc39190613e46565b876003018190555042876002018190555050505050612f3f565b60008290505b818111612f34576000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110612d63577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600202016040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001600182015481525050905060004282602001516fffffffffffffffffffffffffffffffff1611612e575781602001516fffffffffffffffffffffffffffffffff16612e59565b425b90506000866002015483600001516fffffffffffffffffffffffffffffffff1611612e88578660020154612ea0565b82600001516fffffffffffffffffffffffffffffffff165b905060008183612eb09190614098565b90506000846040015182612ec4919061403e565b9050886000015464e8d4a5100082612edc919061403e565b612ee69190613e9c565b8960030154612ef59190613e46565b896003018190555084602001516fffffffffffffffffffffffffffffffff16896002018190555050505050508080612f2c90614185565b915050612ce3565b508083600401819055505b5050505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016130659190613a3a565b60206040518083038186803b15801561307d57600080fd5b505afa158015613091573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b591906136db565b905080821115613172577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b815260040161311a929190613a8c565b602060405180830381600087803b15801561313457600080fd5b505af1158015613148573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316c9190613689565b50613221565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b81526004016131cd929190613a8c565b602060405180830381600087803b1580156131e757600080fd5b505af11580156131fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321f9190613689565b505b505050565b600033905090565b604051806060016040528060006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600081525090565b600061328661328184613d97565b613d72565b905080838252602082019050828560208602820111156132a557600080fd5b60005b858110156132d557816132bb8882613392565b8452602084019350602083019250506001810190506132a8565b5050509392505050565b6000813590506132ee8161445c565b92915050565b60008083601f84011261330657600080fd5b8235905067ffffffffffffffff81111561331f57600080fd5b60208301915083602082028301111561333757600080fd5b9250929050565b600082601f83011261334f57600080fd5b813561335f848260208601613273565b91505092915050565b60008151905061337781614473565b92915050565b60008135905061338c8161448a565b92915050565b6000813590506133a1816144a1565b92915050565b6000815190506133b6816144a1565b92915050565b6000602082840312156133ce57600080fd5b60006133dc848285016132df565b91505092915050565b600080604083850312156133f857600080fd5b6000613406858286016132df565b9250506020613417858286016132df565b9150509250929050565b600080600080600060a0868803121561343957600080fd5b6000613447888289016132df565b9550506020613458888289016132df565b9450506040613469888289016132df565b935050606061347a88828901613392565b925050608061348b88828901613392565b9150509295509295909350565b6000806000604084860312156134ad57600080fd5b60006134bb868287016132df565b935050602084013567ffffffffffffffff8111156134d857600080fd5b6134e4868287016132f4565b92509250509250925092565b6000806000806080858703121561350657600080fd5b6000613514878288016132df565b945050602085013567ffffffffffffffff81111561353157600080fd5b61353d8782880161333e565b935050604085013567ffffffffffffffff81111561355a57600080fd5b6135668782880161333e565b925050606085013567ffffffffffffffff81111561358357600080fd5b61358f8782880161333e565b91505092959194509250565b600080604083850312156135ae57600080fd5b60006135bc858286016132df565b92505060206135cd85828601613392565b9150509250929050565b600080600080608085870312156135ed57600080fd5b60006135fb878288016132df565b945050602061360c87828801613392565b935050604061361d8782880161337d565b925050606061362e8782880161337d565b91505092959194509250565b60008060006060848603121561364f57600080fd5b600061365d868287016132df565b935050602061366e86828701613392565b925050604061367f86828701613392565b9150509250925092565b60006020828403121561369b57600080fd5b60006136a984828501613368565b91505092915050565b6000602082840312156136c457600080fd5b60006136d284828501613392565b91505092915050565b6000602082840312156136ed57600080fd5b60006136fb848285016133a7565b91505092915050565b600061371083836139bc565b60608301905092915050565b60006137288383613a1c565b60208301905092915050565b61373d816140cc565b82525050565b61374c816140cc565b82525050565b600061375d82613de3565b6137678185613e13565b935061377283613dc3565b8060005b838110156137a357815161378a8882613704565b975061379583613df9565b925050600181019050613776565b5085935050505092915050565b60006137bb82613dee565b6137c58185613e24565b93506137d083613dd3565b8060005b838110156138015781516137e8888261371c565b97506137f383613e06565b9250506001810190506137d4565b5085935050505092915050565b613817816140de565b82525050565b61382681614130565b82525050565b6000613839601783613e35565b915061384482614279565b602082019050919050565b600061385c602a83613e35565b9150613867826142a2565b604082019050919050565b600061387f602683613e35565b915061388a826142f1565b604082019050919050565b60006138a2601483613e35565b91506138ad82614340565b602082019050919050565b60006138c5601d83613e35565b91506138d082614369565b602082019050919050565b60006138e8602483613e35565b91506138f382614392565b604082019050919050565b600061390b602083613e35565b9150613916826143e1565b602082019050919050565b600061392e601883613e35565b91506139398261440a565b602082019050919050565b6000613951601983613e35565b915061395c82614433565b602082019050919050565b60808201600082015161397d6000850182613734565b5060208201516139906020850182613734565b5060408201516139a36040850182613a1c565b5060608201516139b66060850182613a1c565b50505050565b6060820160008201516139d260008501826139fe565b5060208201516139e560208501826139fe565b5060408201516139f86040850182613a1c565b50505050565b613a07816140ea565b82525050565b613a16816140ea565b82525050565b613a2581614126565b82525050565b613a3481614126565b82525050565b6000602082019050613a4f6000830184613743565b92915050565b6000606082019050613a6a6000830186613743565b613a776020830185613743565b613a846040830184613a2b565b949350505050565b6000604082019050613aa16000830185613743565b613aae6020830184613a2b565b9392505050565b60006020820190508181036000830152613acf8184613752565b905092915050565b60006020820190508181036000830152613af181846137b0565b905092915050565b6000602082019050613b0e600083018461381d565b92915050565b60006020820190508181036000830152613b2d8161382c565b9050919050565b60006020820190508181036000830152613b4d8161384f565b9050919050565b60006020820190508181036000830152613b6d81613872565b9050919050565b60006020820190508181036000830152613b8d81613895565b9050919050565b60006020820190508181036000830152613bad816138b8565b9050919050565b60006020820190508181036000830152613bcd816138db565b9050919050565b60006020820190508181036000830152613bed816138fe565b9050919050565b60006020820190508181036000830152613c0d81613921565b9050919050565b60006020820190508181036000830152613c2d81613944565b9050919050565b6000606082019050613c496000830186613a0d565b613c566020830185613a0d565b613c636040830184613a2b565b949350505050565b6000602082019050613c806000830184613a2b565b92915050565b6000606082019050613c9b6000830186613a2b565b613ca86020830185613a0d565b613cb56040830184613a0d565b949350505050565b6000608082019050613cd26000830187613a2b565b613cdf6020830186613a2b565b613cec6040830185613a2b565b613cf96060830184613a2b565b95945050505050565b600061014082019050613d18600083018a613a2b565b613d256020830189613a2b565b613d326040830188613a2b565b613d3f6060830187613a2b565b613d4c6080830186613a2b565b613d5960a083018561380e565b613d6660c0830184613967565b98975050505050505050565b6000613d7c613d8d565b9050613d888282614154565b919050565b6000604051905090565b600067ffffffffffffffff821115613db257613db161422c565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613e5182614126565b9150613e5c83614126565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613e9157613e906141ce565b5b828201905092915050565b6000613ea782614126565b9150613eb283614126565b925082613ec257613ec16141fd565b5b828204905092915050565b6000808291508390505b6001851115613f1757808604811115613ef357613ef26141ce565b5b6001851615613f025780820291505b8081029050613f108561426c565b9450613ed7565b94509492505050565b6000613f2b82614126565b9150613f3683614126565b9250613f637fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613f6b565b905092915050565b600082613f7b5760019050614037565b81613f895760009050614037565b8160018114613f9f5760028114613fa957613fd8565b6001915050614037565b60ff841115613fbb57613fba6141ce565b5b8360020a915084821115613fd257613fd16141ce565b5b50614037565b5060208310610133831016604e8410600b841016171561400d5782820a905083811115614008576140076141ce565b5b614037565b61401a8484846001613ecd565b92509050818404811115614031576140306141ce565b5b81810290505b9392505050565b600061404982614126565b915061405483614126565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561408d5761408c6141ce565b5b828202905092915050565b60006140a382614126565b91506140ae83614126565b9250828210156140c1576140c06141ce565b5b828203905092915050565b60006140d782614106565b9050919050565b60008115159050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061413b82614142565b9050919050565b600061414d82614106565b9050919050565b61415d8261425b565b810181811067ffffffffffffffff8211171561417c5761417b61422c565b5b80604052505050565b600061419082614126565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156141c3576141c26141ce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f436f6d70616e792061646472657373206e6f7420736574000000000000000000600082015250565b7f41737365743a20737461727454696d65206d757374206265206c65737320746860008201527f616e20656e6454696d6500000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f506f6f6c206e6f7420696e697469616c697a6564000000000000000000000000600082015250565b7f417373657420726573657276652061646472657373206e6f7420736574000000600082015250565b7f41737365743a20616d6f756e74206d757374206265206772656174657220746860008201527f616e203000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f506f6f6c20616c726561647920696e697469616c697a65640000000000000000600082015250565b7f456d697373696f6e207363686564756c65206e6f742073657400000000000000600082015250565b614465816140cc565b811461447057600080fd5b50565b61447c816140de565b811461448757600080fd5b50565b614493816140ea565b811461449e57600080fd5b50565b6144aa81614126565b81146144b557600080fd5b5056fea26469706673582212208a0312fb09ae1828d87cdd55f354768221148db0f189c75fcea699527930bfe364736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3767,
        "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8913,
        "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
        "label": "registeredAssets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8918,
        "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
        "label": "poolInfo",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(PoolInfo)8897_storage)"
      },
      {
        "astId": 8924,
        "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
        "label": "emissionSchedule",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(EmissionPoint)8904_storage)dyn_storage)"
      },
      {
        "astId": 8931,
        "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
        "label": "userInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)8881_storage))"
      },
      {
        "astId": 8935,
        "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
        "label": "claimReceiver",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EmissionPoint)8904_storage)dyn_storage": {
        "base": "t_struct(EmissionPoint)8904_storage",
        "encoding": "dynamic_array",
        "label": "struct RewardsDistributor.EmissionPoint[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(EmissionPoint)8904_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDistributor.EmissionPoint[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(EmissionPoint)8904_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)8881_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RewardsDistributor.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)8881_storage)"
      },
      "t_mapping(t_address,t_struct(PoolInfo)8897_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDistributor.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)8897_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)8881_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDistributor.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)8881_storage"
      },
      "t_struct(Commission)8872_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.Commission",
        "members": [
          {
            "astId": 8865,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "companyAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8867,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "assetReserveAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 8869,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "companyCommission",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8871,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "assetReserveCommission",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(EmissionPoint)8904_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.EmissionPoint",
        "members": [
          {
            "astId": 8899,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 8901,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "endTime",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 8903,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "rewardsPerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)8897_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.PoolInfo",
        "members": [
          {
            "astId": 8883,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8885,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "decimals",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8887,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8889,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8891,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "currentEmissionPoint",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8893,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "isInitialized",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 8896,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "commission",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(Commission)8872_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(UserInfo)8881_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.UserInfo",
        "members": [
          {
            "astId": 8874,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8876,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8878,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "baseClaimable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8880,
            "contract": "contracts/v3/RewardsDistributor.sol:RewardsDistributor",
            "label": "lastEmissionPoint",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
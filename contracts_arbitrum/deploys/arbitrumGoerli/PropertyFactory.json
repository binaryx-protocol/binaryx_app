{
  "address": "0xCb1b5818b40Ba10CA6c846eCE6fBCA7443F7e023",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressesProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "NewAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressesProvider",
      "outputs": [
        {
          "internalType": "contract IAddressesProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "assets",
      "outputs": [
        {
          "internalType": "contract Asset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressesProvider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalSupply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "buyToken",
          "type": "address"
        }
      ],
      "name": "deployAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssets",
      "outputs": [
        {
          "internalType": "contract Asset[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dd7c6d903917183b8c67b7be16aeb1f0970792365bf751305fa34883fcd06cf",
  "receipt": {
    "to": null,
    "from": "0xC6BdFA7e694db5621CdcB7242d1931FC586f6d1d",
    "contractAddress": "0xCb1b5818b40Ba10CA6c846eCE6fBCA7443F7e023",
    "transactionIndex": 1,
    "gasUsed": "3279394",
    "logsBloom": "0x
    "blockHash": "0x43543b6d3e7cb54d988d3f7d40b56451f176992724c3aa915121560b0e60c9b2",
    "transactionHash": "0x2dd7c6d903917183b8c67b7be16aeb1f0970792365bf751305fa34883fcd06cf",
    "logs": [],
    "blockNumber": 3229428,
    "cumulativeGasUsed": "3279394",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe4389d82FC544E13C9925Ab1A106951eF6238168"
  ],
  "numDeployments": 1,
  "solcInputHash": "8360ed8ab91bd6123437d68828943be0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NewAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressesProvider\",\"outputs\":[{\"internalType\":\"contract IAddressesProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"contract Asset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalSupply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"}],\"name\":\"deployAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssets\",\"outputs\":[{\"internalType\":\"contract Asset[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v3/PropertyFactory.sol\":\"PropertyFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/v3/Asset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./interfaces/IAddressesProvider.sol\\\";\\nimport \\\"./interfaces/IAsset.sol\\\";\\nimport \\\"./RewardsDistributor.sol\\\";\\nimport \\\"./AssetPriceOracle.sol\\\";\\n\\ncontract Asset is IAsset, ERC20 {\\n\\n  IAddressesProvider public addressesProvider;\\n  ERC20 public buyToken;\\n\\n  uint256 public maxTotalSupply;\\n  uint256 public leftToBuy;\\n  uint256 public buyTokenDecimals;\\n  bool public soldOut;\\n\\n  constructor (address _addressesProvider, string memory name, string memory symbol, uint256 _maxTotalSupply, ERC20 _buyToken) ERC20(name, symbol) {\\n    require(_maxTotalSupply > 0, \\\"maxTotalSupply must be greater than 0\\\");\\n    require(address(_buyToken) != address(0), \\\"buyToken must be a valid address\\\");\\n    addressesProvider = IAddressesProvider(_addressesProvider);\\n    maxTotalSupply = _maxTotalSupply;\\n    leftToBuy = _maxTotalSupply;\\n    buyToken = _buyToken;\\n    buyTokenDecimals = 10 ** ERC20(_buyToken).decimals();\\n    soldOut = false;\\n  }\\n\\n  function getRewardDistribution() public view returns (RewardsDistributor) {\\n    return RewardsDistributor(addressesProvider.getRewardsDistributor());\\n  }\\n\\n  function getAssetPriceOracle() public view returns (AssetPriceOracle) {\\n    return AssetPriceOracle(addressesProvider.getAssetPriceOracle());\\n  }\\n\\n  function invest(address recipient, uint256 amount) public override {\\n    require(!soldOut, \\\"Asset is sold out\\\");\\n    require(amount > 0, \\\"amount must be greater than 0\\\");\\n    require(amount <= leftToBuy, \\\"amount must be less than or equal to leftToBuy\\\");\\n    RewardsDistributor rewardsDistributor = getRewardDistribution();\\n    require(address(rewardsDistributor) != address(0), \\\"rewardsDistributor must be set\\\");\\n    AssetPriceOracle oracle = getAssetPriceOracle();\\n    require(address(oracle) != address(0), \\\"oracle must be set\\\");\\n    uint256 price = oracle.latestPrice(address(this));\\n    require(price > 0, \\\"price must be greater than 0\\\");\\n\\n    uint256 buyTokenAmount = amount * buyTokenDecimals / 10 ** decimals() * price;\\n    buyToken.transferFrom(msg.sender, address(this), buyTokenAmount);\\n    _mint(recipient, amount);\\n  unchecked {\\n    leftToBuy -= amount;\\n  }\\n    uint256 recipientBalance = balanceOf(recipient);\\n    rewardsDistributor.onUserBalanceChanged(recipient, recipientBalance);\\n\\n    if (leftToBuy == 0) {\\n      soldOut = true;\\n      emit Sold();\\n    }\\n    emit Bought(msg.sender, amount);\\n  }\\n\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual override {\\n    super._transfer(sender, recipient, amount);\\n    RewardsDistributor rewardsDistributor = getRewardDistribution();\\n    if (address(rewardsDistributor) != address(0)) {\\n      uint256 senderBalance = balanceOf(sender);\\n      uint256 recipientBalance = balanceOf(recipient);\\n      rewardsDistributor.onUserBalanceChanged(sender, senderBalance);\\n      rewardsDistributor.onUserBalanceChanged(recipient, recipientBalance);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x72cb219cf1368a135028ba951e7d42c49e8b01cf0a538e6301d933f1eb0d86d9\",\"license\":\"MIT\"},\"contracts/v3/AssetPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RewardsDistributor.sol\\\";\\nimport \\\"./interfaces/IAddressesProvider.sol\\\";\\n\\ncontract AssetPriceOracle {\\n  struct Price {\\n    uint256 price;\\n    uint256 timestamp;\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == addressesProvider.getAssetPriceOracleAdmin(), \\\"AssetPriceOracle: caller is not the AssetPriceOracleAdmin\\\");\\n    _;\\n  }\\n\\n  IAddressesProvider public addressesProvider;\\n\\n  constructor(address _addressesProvider) {\\n    addressesProvider = IAddressesProvider(_addressesProvider);\\n  }\\n\\n  mapping(address => Price) public assetPrice;\\n\\n  function latestPrice(address asset) external view returns (uint256) {\\n    return assetPrice[asset].price;\\n  }\\n\\n  function latestTimestamp(address asset) external view returns (uint256) {\\n    return assetPrice[asset].timestamp;\\n  }\\n\\n  function setAssetPrice(address asset, uint256 price) public onlyOwner {\\n    require(price > 0, \\\"AssetPriceOracle: price must be greater than 0\\\");\\n    assetPrice[asset].price = price;\\n    assetPrice[asset].timestamp = block.timestamp;\\n  }\\n\\n  function setAssetPrices(address[] memory assets, uint256[] memory prices) external onlyOwner {\\n    require(assets.length == prices.length, \\\"assets and prices must have the same length\\\");\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      setAssetPrice(assets[i], prices[i]);\\n    }\\n  }\\n\\n  function addAsset(address asset, uint256 price) public onlyOwner {\\n    require(assetPrice[asset].timestamp == 0, \\\"AssetPriceOracle: asset already exists\\\");\\n    assetPrice[asset].price = price;\\n    assetPrice[asset].timestamp = block.timestamp;\\n  }\\n\\n  function addAssets(address[] memory assets, uint256[] memory prices) external onlyOwner {\\n    require(assets.length == prices.length, \\\"assets and prices must have the same length\\\");\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      addAsset(assets[i], prices[i]);\\n    }\\n  }\\n\\n  function removeAsset(address asset) external onlyOwner {\\n    require(assetPrice[asset].timestamp != 0, \\\"AssetPriceOracle: asset does not exist\\\");\\n    delete assetPrice[asset];\\n  }\\n}\\n\",\"keccak256\":\"0x5c6fb30470589d19f4fb36e5df912389241ac3602c866b8eecf405d808d0ece7\",\"license\":\"MIT\"},\"contracts/v3/PropertyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./RewardsDistributor.sol\\\";\\nimport \\\"./Asset.sol\\\";\\n\\n\\ncontract PropertyFactory {\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == addressesProvider.getPropertyFactoryAdmin(), \\\"PropertyFactory: caller is not the PropertyFactoryAdmin\\\");\\n    _;\\n  }\\n\\n  event NewAsset(address indexed asset);\\n\\n  IAddressesProvider public addressesProvider;\\n  Asset[] public assets;\\n\\n  constructor(address _addressesProvider) {\\n    addressesProvider = IAddressesProvider(_addressesProvider);\\n  }\\n\\n  function getAssetLength() external view returns (uint256) {\\n    return assets.length;\\n  }\\n\\n  function getAssets() external view returns (Asset[] memory) {\\n    return assets;\\n  }\\n\\n  function deployAsset(address _addressesProvider, string memory name, string memory symbol, uint256 maxTotalSupply, address buyToken) external onlyOwner {\\n    Asset asset = new Asset(_addressesProvider, name, symbol, maxTotalSupply, ERC20(buyToken));\\n    assets.push(asset);\\n    emit NewAsset(address(asset));\\n  }\\n}\\n\",\"keccak256\":\"0x39b2e593f13a68bee91629e9c9d7e1bede68a0c6f8a7aad0430dbc987a28a9a3\",\"license\":\"MIT\"},\"contracts/v3/RewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IRewardsDistributor.sol\\\";\\nimport \\\"./interfaces/IAddressesProvider.sol\\\";\\n\\ncontract RewardsDistributor is IRewardsDistributor {\\n\\n  uint256 private constant COMMISSION_PRECISION = 10000; // 100%\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == addressesProvider.getRewardsDistributorAdmin(), \\\"RewardsDistributor: caller is not the RewardsDistributorAdmin\\\");\\n    _;\\n  }\\n\\n  IAddressesProvider public immutable addressesProvider;\\n  IERC20 public immutable rewardToken;\\n  uint256 public immutable rewardTokenDecimals = 1e6;\\n\\n  address[] public registeredAssets;\\n\\n  // token => Pool Info for that token.\\n  mapping(address => PoolInfo) public poolInfo;\\n\\n  // token => Array of Emission point structs.\\n  mapping(address => EmissionPoint[]) public emissionSchedule;\\n\\n  // token => user => Info of each user that stakes LP tokens.\\n  mapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n  // user => receiver\\n  mapping(address => address) public claimReceiver;\\n\\n  constructor(IERC20 _rewardToken, IAddressesProvider _addressesProvider) {\\n    require(address(_addressesProvider) != address(0), \\\"RewardsDistributor: addresses provider is the zero address\\\");\\n    require(address(_rewardToken) != address(0), \\\"RewardsDistributor: reward token is the zero address\\\");\\n    addressesProvider = _addressesProvider;\\n    rewardToken = _rewardToken;\\n  }\\n\\n  function poolLength() external view override returns (uint256) {\\n    return registeredAssets.length;\\n  }\\n\\n  function calculateActualEmissionPointPerPool(address _token) public view override returns (uint256) {\\n    uint256 currentEmissionPoint = poolInfo[_token].currentEmissionPoint;\\n    EmissionPoint[] storage schedule = emissionSchedule[_token];\\n    if (schedule.length == 0) {\\n      return 0;\\n    }\\n    for (uint256 i = currentEmissionPoint; i < schedule.length; i++) {\\n      if (schedule[i].startTime <= block.timestamp && block.timestamp < schedule[i].endTime) {\\n        return i;\\n      }\\n    }\\n    return schedule.length - 1;\\n  }\\n\\n  function emissionScheduleLength(address _token) external view override returns (uint256) {\\n    return emissionSchedule[_token].length;\\n  }\\n\\n  function getEmissionPoints(address _token, uint256 startIndex) external view override returns (EmissionPoint[] memory emissionPoints) {\\n    uint256 length = emissionSchedule[_token].length;\\n    emissionPoints = new EmissionPoint[](length - startIndex);\\n    for (uint256 i = 0; i < length - startIndex; i++) {\\n      emissionPoints[i] = emissionSchedule[_token][i + startIndex];\\n    }\\n  }\\n\\n  function claimableRewards(address _user, address[] calldata _tokens) external view override returns (uint256[] memory) {\\n    uint256[] memory claimable = new uint256[](_tokens.length);\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      address token = _tokens[i];\\n      PoolInfo memory pool = poolInfo[token];\\n      uint256 firstEmissionPoint = pool.currentEmissionPoint;\\n      uint256 lastEmissionPoint = calculateActualEmissionPointPerPool(token);\\n      if (firstEmissionPoint == lastEmissionPoint) {\\n        EmissionPoint memory emissionPoint = emissionSchedule[token][pool.currentEmissionPoint];\\n        uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n        uint256 duration = block.timestamp - startTime;\\n        uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n        pool.lastRewardTime = block.timestamp;\\n      } else {\\n        for (uint256 j = firstEmissionPoint; j <= lastEmissionPoint; j++) {\\n          EmissionPoint memory emissionPoint = emissionSchedule[token][j];\\n          uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n          uint256 endTime = emissionPoint.endTime > block.timestamp ? block.timestamp : emissionPoint.endTime;\\n          uint256 duration = endTime - startTime;\\n          uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n          pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n          pool.lastRewardTime = endTime;\\n        }\\n      }\\n      UserInfo memory user = userInfo[token][_user];\\n      claimable[i] = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12 - user.rewardDebt;\\n    }\\n    return claimable;\\n  }\\n\\n  function addPool(address _token, uint256 decimals, uint256 _totalSupply) external override onlyOwner {\\n    require(poolInfo[_token].lastRewardTime == 0);\\n    registeredAssets.push(_token);\\n    poolInfo[_token] = PoolInfo({\\n    totalSupply : _totalSupply,\\n    lastRewardTime : block.timestamp,\\n    accRewardPerShare : 0,\\n    currentEmissionPoint : 0,\\n    isInitialized : false,\\n    decimals : 10 ** decimals,\\n    commission : Commission({\\n    companyAddress : address(0),\\n    assetReserveAddress : address(0),\\n    companyCommission : 0,\\n    assetReserveCommission : 0\\n    })\\n    });\\n    emit PoolAdded(_token, _totalSupply);\\n  }\\n\\n  function addEmissionPointsForPool(address _token, uint256[] memory _startTimes, uint256[] memory _endTimes, uint256[] memory _rewardsPerSecond) external override onlyOwner {\\n    require(_startTimes.length == _endTimes.length);\\n    require(_startTimes.length == _rewardsPerSecond.length);\\n    for (uint256 i = 0; i < _startTimes.length; i++) {\\n      emissionSchedule[_token].push(EmissionPoint({\\n      startTime : uint128(_startTimes[i]),\\n      endTime : uint128(_endTimes[i]),\\n      rewardsPerSecond : _rewardsPerSecond[i]\\n      }));\\n    }\\n    _updatePool(_token);\\n  }\\n\\n  function initializePool(address _token, address companyAddress, address assetReserveAddress, uint256 companyCommission, uint256 assetReserveCommission) external override onlyOwner {\\n    require(!poolInfo[_token].isInitialized, \\\"Pool already initialized\\\");\\n    require(emissionSchedule[_token].length > 0, \\\"Emission schedule not set\\\");\\n    require(companyAddress != address(0), \\\"Company address not set\\\");\\n    require(assetReserveAddress != address(0), \\\"Asset reserve address not set\\\");\\n    poolInfo[_token].isInitialized = true;\\n    poolInfo[_token].commission = Commission({\\n    companyAddress : companyAddress,\\n    assetReserveAddress : assetReserveAddress,\\n    companyCommission : companyCommission,\\n    assetReserveCommission : assetReserveCommission\\n    });\\n\\n    emit PoolInitialized(_token);\\n  }\\n\\n  function _updatePool(address _token) internal {\\n    PoolInfo storage pool = poolInfo[_token];\\n    if (block.timestamp <= pool.lastRewardTime || !pool.isInitialized || emissionSchedule[_token].length == 0) {\\n      return;\\n    }\\n    uint256 firstEmissionPoint = pool.currentEmissionPoint;\\n    uint256 lastEmissionPoint = calculateActualEmissionPointPerPool(_token);\\n    if (firstEmissionPoint == lastEmissionPoint) {\\n      EmissionPoint memory emissionPoint = emissionSchedule[_token][pool.currentEmissionPoint];\\n      uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n      uint256 duration = block.timestamp - startTime;\\n      uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n      pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n      pool.lastRewardTime = block.timestamp;\\n    }\\n    else {\\n      for (uint256 i = firstEmissionPoint; i <= lastEmissionPoint; i++) {\\n        EmissionPoint memory emissionPoint = emissionSchedule[_token][i];\\n        uint256 endTime = emissionPoint.endTime > block.timestamp ? block.timestamp : emissionPoint.endTime;\\n        uint256 startTime = emissionPoint.startTime > pool.lastRewardTime ? emissionPoint.startTime : pool.lastRewardTime;\\n        uint256 duration = endTime - startTime;\\n        uint256 reward = duration * emissionPoint.rewardsPerSecond;\\n        pool.accRewardPerShare = pool.accRewardPerShare + (reward * 1e12 / (pool.totalSupply * rewardTokenDecimals / pool.decimals));\\n        pool.lastRewardTime = emissionPoint.endTime;\\n      }\\n      pool.currentEmissionPoint = lastEmissionPoint;\\n    }\\n  }\\n\\n  function onUserBalanceChanged(address _user, uint256 _balance) external override {\\n    PoolInfo storage pool = poolInfo[msg.sender];\\n    require(pool.lastRewardTime > 0);\\n    _updatePool(msg.sender);\\n    UserInfo storage user = userInfo[msg.sender][_user];\\n    if (user.amount > 0) {\\n      uint256 pending = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12 - user.rewardDebt;\\n      if (pending > 0) {\\n        user.baseClaimable += pending;\\n      }\\n    }\\n    user.amount = _balance;\\n    user.rewardDebt = _balance * pool.accRewardPerShare / 1e12;\\n\\n    emit UserBalanceUpdated(msg.sender, _user, _balance);\\n  }\\n\\n  function setClaimReceiver(address _user, address _receiver) external override {\\n    require(msg.sender == _user, \\\"Only user can set claim receiver\\\");\\n    claimReceiver[_user] = _receiver;\\n  }\\n\\n  function claim(address _user, address[] calldata _tokens) external override {\\n    uint256 pending;\\n    for (uint i = 0; i < _tokens.length; i++) {\\n      PoolInfo storage pool = poolInfo[_tokens[i]];\\n      require(pool.lastRewardTime > 0);\\n      _updatePool(_tokens[i]);\\n\\n      UserInfo storage user = userInfo[_tokens[i]][_user];\\n      uint256 currentRewardDebt = user.amount * rewardTokenDecimals / pool.decimals * pool.accRewardPerShare / 1e12;\\n      pending = pending + (currentRewardDebt - user.rewardDebt) + user.baseClaimable;\\n      user.baseClaimable = 0;\\n      user.rewardDebt = currentRewardDebt;\\n    }\\n    safeRewardTokenTransfer(_user, pending);\\n    emit Claimed(_user, pending);\\n  }\\n\\n  function safeRewardTokenTransfer(address _to, uint256 _amount) private {\\n    uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n    if (_amount > rewardTokenBalance) {\\n      rewardToken.transfer(_to, rewardTokenBalance);\\n    } else {\\n      rewardToken.transfer(_to, _amount);\\n    }\\n  }\\n\\n  function payForRent(address token, uint256 amount, uint128 startTime, uint128 endTime) external override {\\n    require(poolInfo[token].isInitialized, \\\"Pool not initialized\\\");\\n    require(amount > 0, \\\"Asset: amount must be greater than 0\\\");\\n    require(startTime < endTime, \\\"Asset: startTime must be less than endTime\\\");\\n    uint256 companyPart = amount * poolInfo[token].commission.companyCommission / COMMISSION_PRECISION;\\n    uint256 assetReservePart = amount * poolInfo[token].commission.assetReserveCommission / COMMISSION_PRECISION;\\n    uint256 userPart = amount - companyPart - assetReservePart;\\n    rewardToken.transferFrom(msg.sender, poolInfo[token].commission.companyAddress, companyPart);\\n    rewardToken.transferFrom(msg.sender, poolInfo[token].commission.assetReserveAddress, assetReservePart);\\n    rewardToken.transferFrom(msg.sender, address(this), userPart);\\n    emit PaidRent(msg.sender, token, amount, startTime, endTime);\\n    emit CompanyPaid(token, companyPart);\\n    emit AssetReservePaid(token, assetReservePart);\\n  }\\n}\\n\",\"keccak256\":\"0xd986587cccae95bac5bff3cb592bed1c15d2bcfd1361e648c812c02dfbcb2e33\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAddressesProvider {\\n  event AddressSet(bytes32 id, address indexed newAddress);\\n  event RewardDistributorUpdated(address indexed newAddress);\\n  event AssetPriceOracleUpdated(address indexed newAddress);\\n  event MasterSeriesUpdated(address indexed newAddress);\\n  event RewardDistributorAdminUpdated(address indexed newAddress);\\n  event AssetPriceOracleAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event PropertyFactoryUpdated(address indexed newAddress);\\n  event PropertyFactoryAdminUpdated(address indexed newAddress);\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n  function getAddress(bytes32 id) external view returns (address);\\n  function getRewardsDistributor() external view returns (address);\\n  function setRewardsDistributor(address _rewardDistributor) external;\\n  function getAssetPriceOracle() external view returns (address);\\n  function setAssetPriceOracle(address _assetPriceOracle) external;\\n  function getMasterSeries() external view returns (address);\\n  function setMasterSeries(address _masterSeries) external;\\n  function getRewardsDistributorAdmin() external view returns (address);\\n  function setRewardsDistributorAdmin(address _rewardDistributorAdmin) external;\\n  function getAssetPriceOracleAdmin() external view returns (address);\\n  function setAssetPriceOracleAdmin(address _assetPriceOracleAdmin) external;\\n  function getEmergencyAdmin() external view returns (address);\\n  function setEmergencyAdmin(address _emergencyAdmin) external;\\n  function getPropertyFactory() external view returns (address);\\n  function setPropertyFactory(address _propertyFactory) external;\\n  function getPropertyFactoryAdmin() external view returns (address);\\n  function setPropertyFactoryAdmin(address _propertyFactoryAdmin) external;\\n}\\n\",\"keccak256\":\"0xcaf0c2635bda0ddd52342504531d9ced211732b3248080d38f3e59cecd67a93c\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ninterface IAsset {\\n  event Bought(address indexed buyer, uint256 amount);\\n  event Sold();\\n\\n  function invest(address recipient, uint256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0x633798a30dc4ab726e6a43756da14e2909685bc5fb49f57d7d941f14cbe95c6d\",\"license\":\"MIT\"},\"contracts/v3/interfaces/IRewardsDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRewardsDistributor {\\n  event UserBalanceUpdated(address indexed asset, address indexed user, uint256 balance);\\n  event Claimed(address indexed user, uint256 amount);\\n  event PoolAdded(address indexed asset, uint256 totalSupply);\\n  event PoolInitialized(address indexed asset);\\n  event PaidRent(address indexed user, address indexed asset, uint256 amount, uint128 startTime, uint128 endTime);\\n  event CompanyPaid(address indexed asset, uint256 amount);\\n  event AssetReservePaid(address indexed asset, uint256 amount);\\n\\n  struct Commission {\\n    address companyAddress;\\n    address assetReserveAddress;\\n    uint256 companyCommission; // 1000 = 10% | 100 = 1% | 10 = 0.1%\\n    uint256 assetReserveCommission; // 1000 = 10% | 100 = 1% | 10 = 0.1%\\n  }\\n\\n  struct UserInfo {\\n    uint256 amount;\\n    uint256 rewardDebt;\\n    uint256 baseClaimable;\\n    uint256 lastEmissionPoint;\\n  }\\n\\n  struct PoolInfo {\\n    uint256 totalSupply;\\n    uint256 decimals;\\n    uint256 lastRewardTime; // Last second that reward distribution occurs.\\n    uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12.\\n    uint256 currentEmissionPoint;\\n    bool isInitialized;\\n    Commission commission;\\n  }\\n\\n  struct EmissionPoint {\\n    uint128 startTime;\\n    uint128 endTime;\\n    uint256 rewardsPerSecond;\\n  }\\n\\n  function poolLength() external view returns (uint256);\\n  function emissionScheduleLength(address _token) external view returns (uint256);\\n  function getEmissionPoints(address _token, uint256 startIndex) external view returns (EmissionPoint[] memory emissionPoints);\\n  function calculateActualEmissionPointPerPool(address _token) external view returns (uint256);\\n  function claim(address user, address[] calldata _tokens) external;\\n  function onUserBalanceChanged(address _user, uint256 _balance) external;\\n  function setClaimReceiver(address _user, address _receiver) external;\\n  function addPool(address _token, uint256 _decimals, uint256 _totalSupply) external;\\n  function initializePool(address _token, address companyAddress, address assetReserveAddress, uint256 companyCommission, uint256 assetReserveCommission) external;\\n  function addEmissionPointsForPool(address _token, uint256[] memory _startTimes, uint256[] memory _endTimes, uint256[] memory _rewardsPerSecond) external;\\n  function payForRent(address _asset, uint256 _amount, uint128 _startTime, uint128 _endTime) external;\\n  function claimableRewards(address _user, address[] calldata _tokens) external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xe198f55041e2230d4363c8487eb7769631744e33d530666b8bf2a54568843a92\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051613b3b380380613b3b8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506100ff565b600081519050610087816100e8565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100c8565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6100f1816100b6565b81146100fc57600080fd5b50565b613a2d8061010e6000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806367e4ac2c1462000063578063714c306c1462000085578063a501553e14620000a5578063c72c4d1014620000c7578063cf35bdd014620000e9575b600080fd5b6200006d6200011f565b6040516200007c9190620007b3565b60405180910390f35b620000a360048036038101906200009d919062000516565b620001af565b005b620000af620003b4565b604051620000be919062000833565b60405180910390f35b620000d1620003c1565b604051620000e09190620007f4565b60405180910390f35b620001076004803603810190620001019190620005ca565b620003e5565b604051620001169190620007d7565b60405180910390f35b60606001805480602002602001604051908101604052809291908181526020018280548015620001a557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200015a575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631db4865f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200021657600080fd5b505afa1580156200022b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002519190620004ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b89062000811565b60405180910390fd5b60008585858585604051620002d69062000425565b620002e695949392919062000748565b604051809103906000f08015801562000303573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc7d9598af6004de7fa9c489a50a55414c75cfbce9fe56fe46956970744d6bc2c60405160405180910390a2505050505050565b6000600180549050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018181548110620003f657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612eff8062000af983390190565b60006200044a620004448462000879565b62000850565b9050828152602081018484840111156200046357600080fd5b62000470848285620009ba565b509392505050565b600081359050620004898162000ac4565b92915050565b600081519050620004a08162000ac4565b92915050565b600082601f830112620004b857600080fd5b8135620004ca84826020860162000433565b91505092915050565b600081359050620004e48162000ade565b92915050565b600060208284031215620004fd57600080fd5b60006200050d848285016200048f565b91505092915050565b600080600080600060a086880312156200052f57600080fd5b60006200053f8882890162000478565b955050602086013567ffffffffffffffff8111156200055d57600080fd5b6200056b88828901620004a6565b945050604086013567ffffffffffffffff8111156200058957600080fd5b6200059788828901620004a6565b9350506060620005aa88828901620004d3565b9250506080620005bd8882890162000478565b9150509295509295909350565b600060208284031215620005dd57600080fd5b6000620005ed84828501620004d3565b91505092915050565b60006200060483836200068b565b60208301905092915050565b6200061b8162000904565b82525050565b60006200062e82620008bf565b6200063a8185620008e2565b93506200064783620008af565b8060005b838110156200067e578151620006628882620005f6565b97506200066f83620008d5565b9250506001810190506200064b565b5085935050505092915050565b620006968162000942565b82525050565b620006a78162000942565b82525050565b620006b8816200096a565b82525050565b620006c98162000992565b82525050565b6000620006dc82620008ca565b620006e88185620008f3565b9350620006fa818560208601620009c9565b620007058162000a64565b840191505092915050565b60006200071f603783620008f3565b91506200072c8262000a75565b604082019050919050565b620007428162000938565b82525050565b600060a0820190506200075f600083018862000610565b8181036020830152620007738187620006cf565b90508181036040830152620007898186620006cf565b90506200079a606083018562000737565b620007a96080830184620006ad565b9695505050505050565b60006020820190508181036000830152620007cf818462000621565b905092915050565b6000602082019050620007ee60008301846200069c565b92915050565b60006020820190506200080b6000830184620006be565b92915050565b600060208201905081810360008301526200082c8162000710565b9050919050565b60006020820190506200084a600083018462000737565b92915050565b60006200085c6200086f565b90506200086a8282620009ff565b919050565b6000604051905090565b600067ffffffffffffffff82111562000897576200089662000a35565b5b620008a28262000a64565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000620009118262000918565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200094f8262000956565b9050919050565b6000620009638262000918565b9050919050565b600062000977826200097e565b9050919050565b60006200098b8262000918565b9050919050565b60006200099f82620009a6565b9050919050565b6000620009b38262000918565b9050919050565b82818337600083830152505050565b60005b83811015620009e9578082015181840152602081019050620009cc565b83811115620009f9576000848401525b50505050565b62000a0a8262000a64565b810181811067ffffffffffffffff8211171562000a2c5762000a2b62000a35565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f50726f7065727479466163746f72793a2063616c6c6572206973206e6f74207460008201527f68652050726f7065727479466163746f727941646d696e000000000000000000602082015250565b62000acf8162000904565b811462000adb57600080fd5b50565b62000ae98162000938565b811462000af557600080fd5b5056fe60806040523480156200001157600080fd5b5060405162002eff38038062002eff8339818101604052810190620000379190620003f0565b838381600390805190602001906200005192919062000272565b5080600490805190602001906200006a92919062000272565b50505060008211620000b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000aa9062000540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000126576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011d906200051e565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007819055508160088190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620001fd57600080fd5b505afa15801562000212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002389190620004a4565b600a6200024691906200062d565b6009819055506000600a60006101000a81548160ff0219169083151502179055505050505050620009f6565b8280546200028090620007ff565b90600052602060002090601f016020900481019282620002a45760008555620002f0565b82601f10620002bf57805160ff1916838001178555620002f0565b82800160010185558215620002f0579182015b82811115620002ef578251825591602001919060010190620002d2565b5b509050620002ff919062000303565b5090565b5b808211156200031e57600081600090555060010162000304565b5090565b60006200033962000333846200058b565b62000562565b9050828152602081018484840111156200035257600080fd5b6200035f848285620007c9565b509392505050565b60008151905062000378816200098e565b92915050565b6000815190506200038f81620009a8565b92915050565b600082601f830112620003a757600080fd5b8151620003b984826020860162000322565b91505092915050565b600081519050620003d381620009c2565b92915050565b600081519050620003ea81620009dc565b92915050565b600080600080600060a086880312156200040957600080fd5b6000620004198882890162000367565b955050602086015167ffffffffffffffff8111156200043757600080fd5b620004458882890162000395565b945050604086015167ffffffffffffffff8111156200046357600080fd5b620004718882890162000395565b93505060606200048488828901620003c2565b925050608062000497888289016200037e565b9150509295509295909350565b600060208284031215620004b757600080fd5b6000620004c784828501620003d9565b91505092915050565b6000620004df602083620005c1565b9150620004ec8262000916565b602082019050919050565b600062000506602583620005c1565b915062000513826200093f565b604082019050919050565b600060208201905081810360008301526200053981620004d0565b9050919050565b600060208201905081810360008301526200055b81620004f7565b9050919050565b60006200056e62000581565b90506200057c828262000835565b919050565b6000604051905090565b600067ffffffffffffffff821115620005a957620005a8620008c9565b5b620005b482620008f8565b9050602081019050919050565b600082825260208201905092915050565b6000808291508390505b60018511156200062457808604811115620005fc57620005fb6200086b565b5b60018516156200060c5780820291505b80810290506200061c8562000909565b9450620005dc565b94509492505050565b60006200063a82620007b2565b91506200064783620007bc565b9250620006767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200067e565b905092915050565b60008262000690576001905062000763565b81620006a0576000905062000763565b8160018114620006b95760028114620006c457620006fa565b600191505062000763565b60ff841115620006d957620006d86200086b565b5b8360020a915084821115620006f357620006f26200086b565b5b5062000763565b5060208310610133831016604e8410600b8410161715620007345782820a9050838111156200072e576200072d6200086b565b5b62000763565b620007438484846001620005d2565b925090508184048111156200075d576200075c6200086b565b5b81810290505b9392505050565b6000620007778262000792565b9050919050565b60006200078b826200076a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015620007e9578082015181840152602081019050620007cc565b83811115620007f9576000848401525b50505050565b600060028204905060018216806200081857607f821691505b602082108114156200082f576200082e6200089a565b5b50919050565b6200084082620008f8565b810181811067ffffffffffffffff82111715620008625762000861620008c9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f627579546f6b656e206d75737420626520612076616c69642061646472657373600082015250565b7f6d6178546f74616c537570706c79206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b62000999816200076a565b8114620009a557600080fd5b50565b620009b3816200077e565b8114620009bf57600080fd5b50565b620009cd81620007b2565b8114620009d957600080fd5b50565b620009e781620007bc565b8114620009f357600080fd5b50565b6124f98062000a066000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806384d9319e116100ad578063a9059cbb11610071578063a9059cbb1461034d578063b9b8c2461461037d578063bdb34bcf14610399578063c72c4d10146103b7578063dd62ed3e146103d55761012c565b806384d9319e146102a5578063893da6c9146102c357806395d89b41146102e1578063a457c2d7146102ff578063a48217191461032f5761012c565b8063313ce567116100f4578063313ce567146101eb57806339509351146102095780635883a94e1461023957806370a0823114610257578063843668f7146102875761012c565b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017f57806323b872dd1461019d5780632ab4d052146101cd575b600080fd5b610139610405565b6040516101469190611abb565b60405180910390f35b61016960048036038101906101649190611690565b610497565b6040516101769190611a34565b60405180910390f35b6101876104ba565b6040516101949190611c9d565b60405180910390f35b6101b760048036038101906101b29190611641565b6104c4565b6040516101c49190611a34565b60405180910390f35b6101d56104f3565b6040516101e29190611c9d565b60405180910390f35b6101f36104f9565b6040516102009190611cb8565b60405180910390f35b610223600480360381019061021e9190611690565b610502565b6040516102309190611a34565b60405180910390f35b610241610539565b60405161024e9190611c9d565b60405180910390f35b610271600480360381019061026c91906115b3565b61053f565b60405161027e9190611c9d565b60405180910390f35b61028f610587565b60405161029c9190611c9d565b60405180910390f35b6102ad61058d565b6040516102ba9190611aa0565b60405180910390f35b6102cb610634565b6040516102d89190611a34565b60405180910390f35b6102e9610647565b6040516102f69190611abb565b60405180910390f35b61031960048036038101906103149190611690565b6106d9565b6040516103269190611a34565b60405180910390f35b610337610750565b6040516103449190611a6a565b60405180910390f35b61036760048036038101906103629190611690565b610776565b6040516103749190611a34565b60405180910390f35b61039760048036038101906103929190611690565b610799565b005b6103a1610c64565b6040516103ae9190611a4f565b60405180910390f35b6103bf610d0b565b6040516103cc9190611a85565b60405180910390f35b6103ef60048036038101906103ea9190611605565b610d31565b6040516103fc9190611c9d565b60405180910390f35b60606003805461041490612059565b80601f016020809104026020016040519081016040528092919081815260200182805461044090612059565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b5050505050905090565b6000806104a2610db8565b90506104af818585610dc0565b600191505092915050565b6000600254905090565b6000806104cf610db8565b90506104dc858285610f8b565b6104e7858585611017565b60019150509392505050565b60075481565b60006012905090565b60008061050d610db8565b905061052e81858561051f8589610d31565b6105299190611cef565b610dc0565b600191505092915050565b60095481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638e21f01c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f91906115dc565b905090565b600a60009054906101000a900460ff1681565b60606004805461065690612059565b80601f016020809104026020016040519081016040528092919081815260200182805461068290612059565b80156106cf5780601f106106a4576101008083540402835291602001916106cf565b820191906000526020600020905b8154815290600101906020018083116106b257829003601f168201915b5050505050905090565b6000806106e4610db8565b905060006106f28286610d31565b905083811015610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e90611c5d565b60405180910390fd5b6107448286868403610dc0565b60019250505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610781610db8565b905061078e818585611017565b600191505092915050565b600a60009054906101000a900460ff16156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611b7d565b60405180910390fd5b6000811161082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390611bbd565b60405180910390fd5b600854811115610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086890611bfd565b60405180910390fd5b600061087b61058d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e490611afd565b60405180910390fd5b60006108f7610c64565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096090611bdd565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166353084eff306040518263ffffffff1660e01b81526004016109a491906119b9565b60206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f491906116f5565b905060008111610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090611b3d565b60405180910390fd5b600081610a446104f9565b600a610a509190611dc9565b60095487610a5e9190611ee7565b610a689190611d45565b610a729190611ee7565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ad3939291906119d4565b602060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2591906116cc565b50610b30868661115f565b846008600082825403925050819055506000610b4b8761053f565b90508473ffffffffffffffffffffffffffffffffffffffff166375fa1bcd88836040518363ffffffff1660e01b8152600401610b88929190611a0b565b600060405180830381600087803b158015610ba257600080fd5b505af1158015610bb6573d6000803e3d6000fd5b5050505060006008541415610c0d576001600a60006101000a81548160ff0219169083151502179055507fe04a8c084d6077ecf6365c5231df863073af1ba9d10fe0d85c1d0dca231b9d8160405160405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff167fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d6787604051610c539190611c9d565b60405180910390a250505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb34bcf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0691906115dc565b905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2790611c3d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9790611b1d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610f7e9190611c9d565b60405180910390a3505050565b6000610f978484610d31565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146110115781811015611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90611b5d565b60405180910390fd5b6110108484848403610dc0565b5b50505050565b6110228383836112bf565b600061102c61058d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461115957600061106d8561053f565b9050600061107a8561053f565b90508273ffffffffffffffffffffffffffffffffffffffff166375fa1bcd87846040518363ffffffff1660e01b81526004016110b7929190611a0b565b600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166375fa1bcd86836040518363ffffffff1660e01b8152600401611124929190611a0b565b600060405180830381600087803b15801561113e57600080fd5b505af1158015611152573d6000803e3d6000fd5b5050505050505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c690611c7d565b60405180910390fd5b6111db60008383611540565b80600260008282546111ed9190611cef565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112429190611cef565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112a79190611c9d565b60405180910390a36112bb60008383611545565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690611c1d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561139f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139690611add565b60405180910390fd5b6113aa838383611540565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142790611b9d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c39190611cef565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115279190611c9d565b60405180910390a361153a848484611545565b50505050565b505050565b505050565b6000813590506115598161247e565b92915050565b60008151905061156e8161247e565b92915050565b60008151905061158381612495565b92915050565b600081359050611598816124ac565b92915050565b6000815190506115ad816124ac565b92915050565b6000602082840312156115c557600080fd5b60006115d38482850161154a565b91505092915050565b6000602082840312156115ee57600080fd5b60006115fc8482850161155f565b91505092915050565b6000806040838503121561161857600080fd5b60006116268582860161154a565b92505060206116378582860161154a565b9150509250929050565b60008060006060848603121561165657600080fd5b60006116648682870161154a565b93505060206116758682870161154a565b925050604061168686828701611589565b9150509250925092565b600080604083850312156116a357600080fd5b60006116b18582860161154a565b92505060206116c285828601611589565b9150509250929050565b6000602082840312156116de57600080fd5b60006116ec84828501611574565b91505092915050565b60006020828403121561170757600080fd5b60006117158482850161159e565b91505092915050565b61172781611f41565b82525050565b61173681611f53565b82525050565b61174581611f96565b82525050565b61175481611fba565b82525050565b61176381611fde565b82525050565b61177281612002565b82525050565b600061178382611cd3565b61178d8185611cde565b935061179d818560208601612026565b6117a681612118565b840191505092915050565b60006117be602383611cde565b91506117c982612136565b604082019050919050565b60006117e1601e83611cde565b91506117ec82612185565b602082019050919050565b6000611804602283611cde565b915061180f826121ae565b604082019050919050565b6000611827601c83611cde565b9150611832826121fd565b602082019050919050565b600061184a601d83611cde565b915061185582612226565b602082019050919050565b600061186d601183611cde565b91506118788261224f565b602082019050919050565b6000611890602683611cde565b915061189b82612278565b604082019050919050565b60006118b3601d83611cde565b91506118be826122c7565b602082019050919050565b60006118d6601283611cde565b91506118e1826122f0565b602082019050919050565b60006118f9602e83611cde565b915061190482612319565b604082019050919050565b600061191c602583611cde565b915061192782612368565b604082019050919050565b600061193f602483611cde565b915061194a826123b7565b604082019050919050565b6000611962602583611cde565b915061196d82612406565b604082019050919050565b6000611985601f83611cde565b915061199082612455565b602082019050919050565b6119a481611f7f565b82525050565b6119b381611f89565b82525050565b60006020820190506119ce600083018461171e565b92915050565b60006060820190506119e9600083018661171e565b6119f6602083018561171e565b611a03604083018461199b565b949350505050565b6000604082019050611a20600083018561171e565b611a2d602083018461199b565b9392505050565b6000602082019050611a49600083018461172d565b92915050565b6000602082019050611a64600083018461173c565b92915050565b6000602082019050611a7f600083018461174b565b92915050565b6000602082019050611a9a600083018461175a565b92915050565b6000602082019050611ab56000830184611769565b92915050565b60006020820190508181036000830152611ad58184611778565b905092915050565b60006020820190508181036000830152611af6816117b1565b9050919050565b60006020820190508181036000830152611b16816117d4565b9050919050565b60006020820190508181036000830152611b36816117f7565b9050919050565b60006020820190508181036000830152611b568161181a565b9050919050565b60006020820190508181036000830152611b768161183d565b9050919050565b60006020820190508181036000830152611b9681611860565b9050919050565b60006020820190508181036000830152611bb681611883565b9050919050565b60006020820190508181036000830152611bd6816118a6565b9050919050565b60006020820190508181036000830152611bf6816118c9565b9050919050565b60006020820190508181036000830152611c16816118ec565b9050919050565b60006020820190508181036000830152611c368161190f565b9050919050565b60006020820190508181036000830152611c5681611932565b9050919050565b60006020820190508181036000830152611c7681611955565b9050919050565b60006020820190508181036000830152611c9681611978565b9050919050565b6000602082019050611cb2600083018461199b565b92915050565b6000602082019050611ccd60008301846119aa565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611cfa82611f7f565b9150611d0583611f7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d3a57611d3961208b565b5b828201905092915050565b6000611d5082611f7f565b9150611d5b83611f7f565b925082611d6b57611d6a6120ba565b5b828204905092915050565b6000808291508390505b6001851115611dc057808604811115611d9c57611d9b61208b565b5b6001851615611dab5780820291505b8081029050611db985612129565b9450611d80565b94509492505050565b6000611dd482611f7f565b9150611ddf83611f89565b9250611e0c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611e14565b905092915050565b600082611e245760019050611ee0565b81611e325760009050611ee0565b8160018114611e485760028114611e5257611e81565b6001915050611ee0565b60ff841115611e6457611e6361208b565b5b8360020a915084821115611e7b57611e7a61208b565b5b50611ee0565b5060208310610133831016604e8410600b8410161715611eb65782820a905083811115611eb157611eb061208b565b5b611ee0565b611ec38484846001611d76565b92509050818404811115611eda57611ed961208b565b5b81810290505b9392505050565b6000611ef282611f7f565b9150611efd83611f7f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f3657611f3561208b565b5b828202905092915050565b6000611f4c82611f5f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611fa182611fa8565b9050919050565b6000611fb382611f5f565b9050919050565b6000611fc582611fcc565b9050919050565b6000611fd782611f5f565b9050919050565b6000611fe982611ff0565b9050919050565b6000611ffb82611f5f565b9050919050565b600061200d82612014565b9050919050565b600061201f82611f5f565b9050919050565b60005b83811015612044578082015181840152602081019050612029565b83811115612053576000848401525b50505050565b6000600282049050600182168061207157607f821691505b60208210811415612085576120846120e9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f726577617264734469737472696275746f72206d757374206265207365740000600082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f7072696365206d7573742062652067726561746572207468616e203000000000600082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f417373657420697320736f6c64206f7574000000000000000000000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b7f6f7261636c65206d757374206265207365740000000000000000000000000000600082015250565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f206c656674546f427579000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61248781611f41565b811461249257600080fd5b50565b61249e81611f53565b81146124a957600080fd5b50565b6124b581611f7f565b81146124c057600080fd5b5056fea2646970667358221220ae04a4aecca879a6f7fbd5be31912b5fd0b177ed03890ce40a5648f468cc8ad664736f6c63430008020033a2646970667358221220e6e929caeca6a3444abd635b7cb1984f4b65fa5c8878d6b6aa69d518387e099d64736f6c63430008020033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806367e4ac2c1462000063578063714c306c1462000085578063a501553e14620000a5578063c72c4d1014620000c7578063cf35bdd014620000e9575b600080fd5b6200006d6200011f565b6040516200007c9190620007b3565b60405180910390f35b620000a360048036038101906200009d919062000516565b620001af565b005b620000af620003b4565b604051620000be919062000833565b60405180910390f35b620000d1620003c1565b604051620000e09190620007f4565b60405180910390f35b620001076004803603810190620001019190620005ca565b620003e5565b604051620001169190620007d7565b60405180910390f35b60606001805480602002602001604051908101604052809291908181526020018280548015620001a557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116200015a575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631db4865f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200021657600080fd5b505afa1580156200022b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002519190620004ea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002c1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002b89062000811565b60405180910390fd5b60008585858585604051620002d69062000425565b620002e695949392919062000748565b604051809103906000f08015801562000303573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fc7d9598af6004de7fa9c489a50a55414c75cfbce9fe56fe46956970744d6bc2c60405160405180910390a2505050505050565b6000600180549050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018181548110620003f657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612eff8062000af983390190565b60006200044a620004448462000879565b62000850565b9050828152602081018484840111156200046357600080fd5b62000470848285620009ba565b509392505050565b600081359050620004898162000ac4565b92915050565b600081519050620004a08162000ac4565b92915050565b600082601f830112620004b857600080fd5b8135620004ca84826020860162000433565b91505092915050565b600081359050620004e48162000ade565b92915050565b600060208284031215620004fd57600080fd5b60006200050d848285016200048f565b91505092915050565b600080600080600060a086880312156200052f57600080fd5b60006200053f8882890162000478565b955050602086013567ffffffffffffffff8111156200055d57600080fd5b6200056b88828901620004a6565b945050604086013567ffffffffffffffff8111156200058957600080fd5b6200059788828901620004a6565b9350506060620005aa88828901620004d3565b9250506080620005bd8882890162000478565b9150509295509295909350565b600060208284031215620005dd57600080fd5b6000620005ed84828501620004d3565b91505092915050565b60006200060483836200068b565b60208301905092915050565b6200061b8162000904565b82525050565b60006200062e82620008bf565b6200063a8185620008e2565b93506200064783620008af565b8060005b838110156200067e578151620006628882620005f6565b97506200066f83620008d5565b9250506001810190506200064b565b5085935050505092915050565b620006968162000942565b82525050565b620006a78162000942565b82525050565b620006b8816200096a565b82525050565b620006c98162000992565b82525050565b6000620006dc82620008ca565b620006e88185620008f3565b9350620006fa818560208601620009c9565b620007058162000a64565b840191505092915050565b60006200071f603783620008f3565b91506200072c8262000a75565b604082019050919050565b620007428162000938565b82525050565b600060a0820190506200075f600083018862000610565b8181036020830152620007738187620006cf565b90508181036040830152620007898186620006cf565b90506200079a606083018562000737565b620007a96080830184620006ad565b9695505050505050565b60006020820190508181036000830152620007cf818462000621565b905092915050565b6000602082019050620007ee60008301846200069c565b92915050565b60006020820190506200080b6000830184620006be565b92915050565b600060208201905081810360008301526200082c8162000710565b9050919050565b60006020820190506200084a600083018462000737565b92915050565b60006200085c6200086f565b90506200086a8282620009ff565b919050565b6000604051905090565b600067ffffffffffffffff82111562000897576200089662000a35565b5b620008a28262000a64565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000620009118262000918565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200094f8262000956565b9050919050565b6000620009638262000918565b9050919050565b600062000977826200097e565b9050919050565b60006200098b8262000918565b9050919050565b60006200099f82620009a6565b9050919050565b6000620009b38262000918565b9050919050565b82818337600083830152505050565b60005b83811015620009e9578082015181840152602081019050620009cc565b83811115620009f9576000848401525b50505050565b62000a0a8262000a64565b810181811067ffffffffffffffff8211171562000a2c5762000a2b62000a35565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f50726f7065727479466163746f72793a2063616c6c6572206973206e6f74207460008201527f68652050726f7065727479466163746f727941646d696e000000000000000000602082015250565b62000acf8162000904565b811462000adb57600080fd5b50565b62000ae98162000938565b811462000af557600080fd5b5056fe60806040523480156200001157600080fd5b5060405162002eff38038062002eff8339818101604052810190620000379190620003f0565b838381600390805190602001906200005192919062000272565b5080600490805190602001906200006a92919062000272565b50505060008211620000b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000aa9062000540565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141562000126576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200011d906200051e565b60405180910390fd5b84600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816007819055508160088190555080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620001fd57600080fd5b505afa15801562000212573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002389190620004a4565b600a6200024691906200062d565b6009819055506000600a60006101000a81548160ff0219169083151502179055505050505050620009f6565b8280546200028090620007ff565b90600052602060002090601f016020900481019282620002a45760008555620002f0565b82601f10620002bf57805160ff1916838001178555620002f0565b82800160010185558215620002f0579182015b82811115620002ef578251825591602001919060010190620002d2565b5b509050620002ff919062000303565b5090565b5b808211156200031e57600081600090555060010162000304565b5090565b60006200033962000333846200058b565b62000562565b9050828152602081018484840111156200035257600080fd5b6200035f848285620007c9565b509392505050565b60008151905062000378816200098e565b92915050565b6000815190506200038f81620009a8565b92915050565b600082601f830112620003a757600080fd5b8151620003b984826020860162000322565b91505092915050565b600081519050620003d381620009c2565b92915050565b600081519050620003ea81620009dc565b92915050565b600080600080600060a086880312156200040957600080fd5b6000620004198882890162000367565b955050602086015167ffffffffffffffff8111156200043757600080fd5b620004458882890162000395565b945050604086015167ffffffffffffffff8111156200046357600080fd5b620004718882890162000395565b93505060606200048488828901620003c2565b925050608062000497888289016200037e565b9150509295509295909350565b600060208284031215620004b757600080fd5b6000620004c784828501620003d9565b91505092915050565b6000620004df602083620005c1565b9150620004ec8262000916565b602082019050919050565b600062000506602583620005c1565b915062000513826200093f565b604082019050919050565b600060208201905081810360008301526200053981620004d0565b9050919050565b600060208201905081810360008301526200055b81620004f7565b9050919050565b60006200056e62000581565b90506200057c828262000835565b919050565b6000604051905090565b600067ffffffffffffffff821115620005a957620005a8620008c9565b5b620005b482620008f8565b9050602081019050919050565b600082825260208201905092915050565b6000808291508390505b60018511156200062457808604811115620005fc57620005fb6200086b565b5b60018516156200060c5780820291505b80810290506200061c8562000909565b9450620005dc565b94509492505050565b60006200063a82620007b2565b91506200064783620007bc565b9250620006767fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200067e565b905092915050565b60008262000690576001905062000763565b81620006a0576000905062000763565b8160018114620006b95760028114620006c457620006fa565b600191505062000763565b60ff841115620006d957620006d86200086b565b5b8360020a915084821115620006f357620006f26200086b565b5b5062000763565b5060208310610133831016604e8410600b8410161715620007345782820a9050838111156200072e576200072d6200086b565b5b62000763565b620007438484846001620005d2565b925090508184048111156200075d576200075c6200086b565b5b81810290505b9392505050565b6000620007778262000792565b9050919050565b60006200078b826200076a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015620007e9578082015181840152602081019050620007cc565b83811115620007f9576000848401525b50505050565b600060028204905060018216806200081857607f821691505b602082108114156200082f576200082e6200089a565b5b50919050565b6200084082620008f8565b810181811067ffffffffffffffff82111715620008625762000861620008c9565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f627579546f6b656e206d75737420626520612076616c69642061646472657373600082015250565b7f6d6178546f74616c537570706c79206d7573742062652067726561746572207460008201527f68616e2030000000000000000000000000000000000000000000000000000000602082015250565b62000999816200076a565b8114620009a557600080fd5b50565b620009b3816200077e565b8114620009bf57600080fd5b50565b620009cd81620007b2565b8114620009d957600080fd5b50565b620009e781620007bc565b8114620009f357600080fd5b50565b6124f98062000a066000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c806384d9319e116100ad578063a9059cbb11610071578063a9059cbb1461034d578063b9b8c2461461037d578063bdb34bcf14610399578063c72c4d10146103b7578063dd62ed3e146103d55761012c565b806384d9319e146102a5578063893da6c9146102c357806395d89b41146102e1578063a457c2d7146102ff578063a48217191461032f5761012c565b8063313ce567116100f4578063313ce567146101eb57806339509351146102095780635883a94e1461023957806370a0823114610257578063843668f7146102875761012c565b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017f57806323b872dd1461019d5780632ab4d052146101cd575b600080fd5b610139610405565b6040516101469190611abb565b60405180910390f35b61016960048036038101906101649190611690565b610497565b6040516101769190611a34565b60405180910390f35b6101876104ba565b6040516101949190611c9d565b60405180910390f35b6101b760048036038101906101b29190611641565b6104c4565b6040516101c49190611a34565b60405180910390f35b6101d56104f3565b6040516101e29190611c9d565b60405180910390f35b6101f36104f9565b6040516102009190611cb8565b60405180910390f35b610223600480360381019061021e9190611690565b610502565b6040516102309190611a34565b60405180910390f35b610241610539565b60405161024e9190611c9d565b60405180910390f35b610271600480360381019061026c91906115b3565b61053f565b60405161027e9190611c9d565b60405180910390f35b61028f610587565b60405161029c9190611c9d565b60405180910390f35b6102ad61058d565b6040516102ba9190611aa0565b60405180910390f35b6102cb610634565b6040516102d89190611a34565b60405180910390f35b6102e9610647565b6040516102f69190611abb565b60405180910390f35b61031960048036038101906103149190611690565b6106d9565b6040516103269190611a34565b60405180910390f35b610337610750565b6040516103449190611a6a565b60405180910390f35b61036760048036038101906103629190611690565b610776565b6040516103749190611a34565b60405180910390f35b61039760048036038101906103929190611690565b610799565b005b6103a1610c64565b6040516103ae9190611a4f565b60405180910390f35b6103bf610d0b565b6040516103cc9190611a85565b60405180910390f35b6103ef60048036038101906103ea9190611605565b610d31565b6040516103fc9190611c9d565b60405180910390f35b60606003805461041490612059565b80601f016020809104026020016040519081016040528092919081815260200182805461044090612059565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b5050505050905090565b6000806104a2610db8565b90506104af818585610dc0565b600191505092915050565b6000600254905090565b6000806104cf610db8565b90506104dc858285610f8b565b6104e7858585611017565b60019150509392505050565b60075481565b60006012905090565b60008061050d610db8565b905061052e81858561051f8589610d31565b6105299190611cef565b610dc0565b600191505092915050565b60095481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60085481565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638e21f01c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f91906115dc565b905090565b600a60009054906101000a900460ff1681565b60606004805461065690612059565b80601f016020809104026020016040519081016040528092919081815260200182805461068290612059565b80156106cf5780601f106106a4576101008083540402835291602001916106cf565b820191906000526020600020905b8154815290600101906020018083116106b257829003601f168201915b5050505050905090565b6000806106e4610db8565b905060006106f28286610d31565b905083811015610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e90611c5d565b60405180910390fd5b6107448286868403610dc0565b60019250505092915050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610781610db8565b905061078e818585611017565b600191505092915050565b600a60009054906101000a900460ff16156107e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e090611b7d565b60405180910390fd5b6000811161082c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082390611bbd565b60405180910390fd5b600854811115610871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086890611bfd565b60405180910390fd5b600061087b61058d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156108ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e490611afd565b60405180910390fd5b60006108f7610c64565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096090611bdd565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166353084eff306040518263ffffffff1660e01b81526004016109a491906119b9565b60206040518083038186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f491906116f5565b905060008111610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3090611b3d565b60405180910390fd5b600081610a446104f9565b600a610a509190611dc9565b60095487610a5e9190611ee7565b610a689190611d45565b610a729190611ee7565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610ad3939291906119d4565b602060405180830381600087803b158015610aed57600080fd5b505af1158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2591906116cc565b50610b30868661115f565b846008600082825403925050819055506000610b4b8761053f565b90508473ffffffffffffffffffffffffffffffffffffffff166375fa1bcd88836040518363ffffffff1660e01b8152600401610b88929190611a0b565b600060405180830381600087803b158015610ba257600080fd5b505af1158015610bb6573d6000803e3d6000fd5b5050505060006008541415610c0d576001600a60006101000a81548160ff0219169083151502179055507fe04a8c084d6077ecf6365c5231df863073af1ba9d10fe0d85c1d0dca231b9d8160405160405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff167fc55650ccda1011e1cdc769b1fbf546ebb8c97800b6072b49e06cd560305b1d6787604051610c539190611c9d565b60405180910390a250505050505050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bdb34bcf6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cce57600080fd5b505afa158015610ce2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0691906115dc565b905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2790611c3d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9790611b1d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610f7e9190611c9d565b60405180910390a3505050565b6000610f978484610d31565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146110115781811015611003576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffa90611b5d565b60405180910390fd5b6110108484848403610dc0565b5b50505050565b6110228383836112bf565b600061102c61058d565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461115957600061106d8561053f565b9050600061107a8561053f565b90508273ffffffffffffffffffffffffffffffffffffffff166375fa1bcd87846040518363ffffffff1660e01b81526004016110b7929190611a0b565b600060405180830381600087803b1580156110d157600080fd5b505af11580156110e5573d6000803e3d6000fd5b505050508273ffffffffffffffffffffffffffffffffffffffff166375fa1bcd86836040518363ffffffff1660e01b8152600401611124929190611a0b565b600060405180830381600087803b15801561113e57600080fd5b505af1158015611152573d6000803e3d6000fd5b5050505050505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156111cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c690611c7d565b60405180910390fd5b6111db60008383611540565b80600260008282546111ed9190611cef565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112429190611cef565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112a79190611c9d565b60405180910390a36112bb60008383611545565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561132f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132690611c1d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561139f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139690611add565b60405180910390fd5b6113aa838383611540565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611430576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142790611b9d565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c39190611cef565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115279190611c9d565b60405180910390a361153a848484611545565b50505050565b505050565b505050565b6000813590506115598161247e565b92915050565b60008151905061156e8161247e565b92915050565b60008151905061158381612495565b92915050565b600081359050611598816124ac565b92915050565b6000815190506115ad816124ac565b92915050565b6000602082840312156115c557600080fd5b60006115d38482850161154a565b91505092915050565b6000602082840312156115ee57600080fd5b60006115fc8482850161155f565b91505092915050565b6000806040838503121561161857600080fd5b60006116268582860161154a565b92505060206116378582860161154a565b9150509250929050565b60008060006060848603121561165657600080fd5b60006116648682870161154a565b93505060206116758682870161154a565b925050604061168686828701611589565b9150509250925092565b600080604083850312156116a357600080fd5b60006116b18582860161154a565b92505060206116c285828601611589565b9150509250929050565b6000602082840312156116de57600080fd5b60006116ec84828501611574565b91505092915050565b60006020828403121561170757600080fd5b60006117158482850161159e565b91505092915050565b61172781611f41565b82525050565b61173681611f53565b82525050565b61174581611f96565b82525050565b61175481611fba565b82525050565b61176381611fde565b82525050565b61177281612002565b82525050565b600061178382611cd3565b61178d8185611cde565b935061179d818560208601612026565b6117a681612118565b840191505092915050565b60006117be602383611cde565b91506117c982612136565b604082019050919050565b60006117e1601e83611cde565b91506117ec82612185565b602082019050919050565b6000611804602283611cde565b915061180f826121ae565b604082019050919050565b6000611827601c83611cde565b9150611832826121fd565b602082019050919050565b600061184a601d83611cde565b915061185582612226565b602082019050919050565b600061186d601183611cde565b91506118788261224f565b602082019050919050565b6000611890602683611cde565b915061189b82612278565b604082019050919050565b60006118b3601d83611cde565b91506118be826122c7565b602082019050919050565b60006118d6601283611cde565b91506118e1826122f0565b602082019050919050565b60006118f9602e83611cde565b915061190482612319565b604082019050919050565b600061191c602583611cde565b915061192782612368565b604082019050919050565b600061193f602483611cde565b915061194a826123b7565b604082019050919050565b6000611962602583611cde565b915061196d82612406565b604082019050919050565b6000611985601f83611cde565b915061199082612455565b602082019050919050565b6119a481611f7f565b82525050565b6119b381611f89565b82525050565b60006020820190506119ce600083018461171e565b92915050565b60006060820190506119e9600083018661171e565b6119f6602083018561171e565b611a03604083018461199b565b949350505050565b6000604082019050611a20600083018561171e565b611a2d602083018461199b565b9392505050565b6000602082019050611a49600083018461172d565b92915050565b6000602082019050611a64600083018461173c565b92915050565b6000602082019050611a7f600083018461174b565b92915050565b6000602082019050611a9a600083018461175a565b92915050565b6000602082019050611ab56000830184611769565b92915050565b60006020820190508181036000830152611ad58184611778565b905092915050565b60006020820190508181036000830152611af6816117b1565b9050919050565b60006020820190508181036000830152611b16816117d4565b9050919050565b60006020820190508181036000830152611b36816117f7565b9050919050565b60006020820190508181036000830152611b568161181a565b9050919050565b60006020820190508181036000830152611b768161183d565b9050919050565b60006020820190508181036000830152611b9681611860565b9050919050565b60006020820190508181036000830152611bb681611883565b9050919050565b60006020820190508181036000830152611bd6816118a6565b9050919050565b60006020820190508181036000830152611bf6816118c9565b9050919050565b60006020820190508181036000830152611c16816118ec565b9050919050565b60006020820190508181036000830152611c368161190f565b9050919050565b60006020820190508181036000830152611c5681611932565b9050919050565b60006020820190508181036000830152611c7681611955565b9050919050565b60006020820190508181036000830152611c9681611978565b9050919050565b6000602082019050611cb2600083018461199b565b92915050565b6000602082019050611ccd60008301846119aa565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611cfa82611f7f565b9150611d0583611f7f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611d3a57611d3961208b565b5b828201905092915050565b6000611d5082611f7f565b9150611d5b83611f7f565b925082611d6b57611d6a6120ba565b5b828204905092915050565b6000808291508390505b6001851115611dc057808604811115611d9c57611d9b61208b565b5b6001851615611dab5780820291505b8081029050611db985612129565b9450611d80565b94509492505050565b6000611dd482611f7f565b9150611ddf83611f89565b9250611e0c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611e14565b905092915050565b600082611e245760019050611ee0565b81611e325760009050611ee0565b8160018114611e485760028114611e5257611e81565b6001915050611ee0565b60ff841115611e6457611e6361208b565b5b8360020a915084821115611e7b57611e7a61208b565b5b50611ee0565b5060208310610133831016604e8410600b8410161715611eb65782820a905083811115611eb157611eb061208b565b5b611ee0565b611ec38484846001611d76565b92509050818404811115611eda57611ed961208b565b5b81810290505b9392505050565b6000611ef282611f7f565b9150611efd83611f7f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f3657611f3561208b565b5b828202905092915050565b6000611f4c82611f5f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611fa182611fa8565b9050919050565b6000611fb382611f5f565b9050919050565b6000611fc582611fcc565b9050919050565b6000611fd782611f5f565b9050919050565b6000611fe982611ff0565b9050919050565b6000611ffb82611f5f565b9050919050565b600061200d82612014565b9050919050565b600061201f82611f5f565b9050919050565b60005b83811015612044578082015181840152602081019050612029565b83811115612053576000848401525b50505050565b6000600282049050600182168061207157607f821691505b60208210811415612085576120846120e9565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f726577617264734469737472696275746f72206d757374206265207365740000600082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f7072696365206d7573742062652067726561746572207468616e203000000000600082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f417373657420697320736f6c64206f7574000000000000000000000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f616d6f756e74206d7573742062652067726561746572207468616e2030000000600082015250565b7f6f7261636c65206d757374206265207365740000000000000000000000000000600082015250565b7f616d6f756e74206d757374206265206c657373207468616e206f72206571756160008201527f6c20746f206c656674546f427579000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61248781611f41565b811461249257600080fd5b50565b61249e81611f53565b81146124a957600080fd5b50565b6124b581611f7f565b81146124c057600080fd5b5056fea2646970667358221220ae04a4aecca879a6f7fbd5be31912b5fd0b177ed03890ce40a5648f468cc8ad664736f6c63430008020033a2646970667358221220e6e929caeca6a3444abd635b7cb1984f4b65fa5c8878d6b6aa69d518387e099d64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9388,
        "contract": "contracts/v3/PropertyFactory.sol:PropertyFactory",
        "label": "addressesProvider",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IAddressesProvider)11150"
      },
      {
        "astId": 9392,
        "contract": "contracts/v3/PropertyFactory.sol:PropertyFactory",
        "label": "assets",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(Asset)8015)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_contract(Asset)8015)dyn_storage": {
        "base": "t_contract(Asset)8015",
        "encoding": "dynamic_array",
        "label": "contract Asset[]",
        "numberOfBytes": "32"
      },
      "t_contract(Asset)8015": {
        "encoding": "inplace",
        "label": "contract Asset",
        "numberOfBytes": "20"
      },
      "t_contract(IAddressesProvider)11150": {
        "encoding": "inplace",
        "label": "contract IAddressesProvider",
        "numberOfBytes": "20"
      }
    }
  }
}